openapi: 3.0.1
info:
  title: Ejoin Gateway HTTP API
  description: >
    Welcome to Ejoin Gateway HTTP API documentation. Here you will find details

    to learn about, try, and implement Ejoin Gateway HTTP API.


    # Overview

    This document specifies HTTP SMS API of Ejoin device, include SMS receiving, single sending, group-sending and status of Sending task querying.
    Based on‘Ejoin SMS sending API’, this document extra support Group-Sending and multi task and status report support in one message.This SMS API is still base on HTTP and add POST request support, enabling multi-tasking and status reporting through a JSON array format. For detailed specifications on the JSON array format, please refer to the standardization guidelines.


    # Examples

    For each API endpoint, we provide basic use case examples. Each example has
    sample payload parameters in JSON format showing how to complete a task (for
    example send SMS, send AT command, get status notification,
    etc.). Each example is accompanied with API response sample.


  version: v2.4.1
  x-logo:
    url: ./EAPI-logo.png
    backgroundColor: '#FAFAFA'
    altText: SMS logo
tags:
  - name: Send message
  - name: ESIM
  - name: Receive SMS
  - name: Query SMS
  - name: Status notification
  - name: Query SMS statistics
  - name: Query call statistics
  - name: 'Send operate command '
  - name: Receive MMS
  - name: AT Command
  - name: USSD API
  - name: SMS Sending
paths:
  /goip_post_sms.html:
    post:
      summary: Send message
      deprecated: false
      description: >-
        Message description :

        host: Device IP address

        port: Device webpage management port, default value is 80.

        Tips:

        1. While not choose a port, device will pick up a random port to send
        SMS to every recipient.

        2. While chose more than one ports, and just one SMS recipient , then
        device will use all chose port to

        send SMS to this recipient.

        3. If more ports, and more recipient designed, then every port will send
        SMS to every recipient

        separately.
      tags:
        - Send message
      parameters:
        - name: version
          in: query
          description: API version
          required: false
          example: ''
          schema:
            type: string
            examples:
              - 1.0：Compatible with previous API
              - '1.1: Support for the description of  this document'
            default: '1.0'
        - name: username
          in: query
          description: Device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example:
              type: “send-sms
              sr_url: https://xxxxx.com/
              sr_cnt: '100'
              sr_prd: 60
              sms_url: https://xxxxxx.com/
              sms_cnt: 1
              sms_prd: 30
              task_num: '1'
              tasks:
                - tid: 5
                  from: channel 1
                  to: 133xxxxxx
                  to_all: '1'
                  sms: SMS content
                  chs: utf8
                  coding: 2
                  smstype: 0
                  smstitle: sms title
                  to_title_array:
                    - - number1
                      - titile1
                    - - number2
                      - titile2
                    - - number3
                      - titile3
                  attachments: MMS attachment
                  smsc: Store the SMSC number
                  intvl: '0'
                  tmo: '30'
                  sdr: 0
                  fdr: 1
                  sr_prd: null
                  sr_cnt: 21
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                  type:
                    type: string
                    description: send-sms
                  status:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                      required:
                        - status
                  task_num:
                    type: array
                    items:
                      type: object
                      properties:
                        tid:
                          type: integer
                          description: Task ID
                        status:
                          type: integer
                          description: >-
                            Task status code

                            0：OK

                            1：Invalid User

                            2：Invalid Port

                            3：USSD Expected

                            4：Pending USSD

                            5：SIM Unregistered

                            6：Timeout

                            7：Server Error

                            8：SMS expected

                            9：TO expected

                            10：Pending Transaction

                            11：TID Expected

                            12：FROM Expected

                            13：Duplicated TaskId

                            14：Unauthorized

                            15：Invalid CMD

                            16：Too Many Task

                            17：MMS Title expected

                            18：Too Many MMS Attachments

                            19：MMS Attachments expected

                            If task status ID not equal to 0, then means this
                            task not received by device
                          minimum: 0
                          maximum: 20
                          examples:
                            - 0
                            - 1
                            - 20
                      required:
                        - tid
                        - status
                required:
                  - reason
                  - type
                  - status
                  - task_num
              examples:
                '1':
                  summary: Successful instance
                  value:
                    type: send-sms
                    task_num: 1
                    tasks:
                      - tid: tid_1
          headers: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      recipients:
                        type: string
                    required:
                      - recipients
                required:
                  - message
              examples:
                '1':
                  summary: Exception instance
                  value:
                    message:
                      recipients: 'One of parameters: to, contacts, groups is required.'
          headers: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Invalid API key.
                required:
                  - message
              examples:
                '1':
                  summary: Exception instance
                  value:
                    message: Invalid API key.
          headers: {}
      security: []
      x-codeSamples:
        - lang: C++
          label: C++
          source: |

            int main(void) {
              CURL *curl;
              CURLcode res;
              using namespace std;

              curl = curl_easy_init();
              if(curl) {
                char const *path = "https://smseagleip/index.php/api/v2/messages/sms";
                curl_easy_setopt(curl, CURLOPT_URL, path);

                string jsonPayload = R"({
                    "to": ["+4812345678"],
                    "contacts": [12,15],
                    "groups": [57,35],
                    "text": "my message",
                    "date": "2022-12-27T12:20:31+05:01",
                    "priority": 5,
                    "encoding": "unicode",
                    "flash": true,
                    "oid": "123abc456def789ghi123abc456def789ghi",
                    "validity": "30m",
                    "send_after": "12:05",
                    "send_before": "17:15",
                    "test": true,
                    "modem_no": 2
                })";

                struct curl_slist* headers = NULL;
                headers = curl_slist_append(headers, "Content-Type: application/json");
                headers = curl_slist_append(headers, "access-token: 0005gOjCOlMH8F2BP8");
                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, jsonPayload.c_str());

                res = curl_easy_perform(curl);

                if(res != CURLE_OK)
                  fprintf(stderr, "curl_easy_perform() failed: %s
            ",
                          curl_easy_strerror(res));

                curl_easy_cleanup(curl);
              }
              return 0;
            }
        - lang: Payload
          label: Payload
          source: "<?php\n$base_url = 'https://smseagleip/index.php/api/v2/';\n$method = 'messages/sms';\n$url = $base_url.$method;\n\n$params = json_encode([            \t\n\t'to' => ['123456789'],\n\t'contacts' => [12,15],\n    'groups' => [57,35],\n    'text' => 'My message',\n    'date' => '2022-12-27T12:20:31+05:01',\n    'priority' => 5,\n    'encoding' => 'unicode',\n    'flash' => true,\n    'oid' => '123abc456def789ghi123abc456def789ghi',\n    'validity' => '30m',\n    'send_after' => '12:05',\n    'send_before' => '17:15',\n    'test' => true,\n    'modem_no' => 2\n]);\n\n$options = [\n\t'http' => [\n\t\t'header' => [\n            'Content-Type: application/json',\n            'access-token: 0005gOjCOlMH8F2BP8'\n        ],\n\t\t'method' => 'POST',\n\t\t'content' => $params\n\t]\n];\n\n$context  = stream_context_create($options);\n\n$ret = fopen($url,'r', false, $context);\n\n$result = fread($ret,1024);\n\nfclose($ret);\n\nif (strpos($http_response_header[0], '200') !== false) {\n\techo \"Message has been sent successfully!\";\n} else {\n\techo \"Send message failed!\";\n}\n"
        - lang: PHP
          label: PHP
          source: "<?php\n$base_url = 'https://smseagleip/index.php/api/v2/';\n$method = 'messages/sms';\n$url = $base_url.$method;\n\n$params = json_encode([            \t\n\t'to' => ['123456789'],\n\t'contacts' => [12,15],\n    'groups' => [57,35],\n    'text' => 'My message',\n    'date' => '2022-12-27T12:20:31+05:01',\n    'priority' => 5,\n    'encoding' => 'unicode',\n    'flash' => true,\n    'oid' => '123abc456def789ghi123abc456def789ghi',\n    'validity' => '30m',\n    'send_after' => '12:05',\n    'send_before' => '17:15',\n    'test' => true,\n    'modem_no' => 2\n]);\n\n$options = [\n\t'http' => [\n\t\t'header' => [\n            'Content-Type: application/json',\n            'access-token: 0005gOjCOlMH8F2BP8'\n        ],\n\t\t'method' => 'POST',\n\t\t'content' => $params\n\t]\n];\n\n$context  = stream_context_create($options);\n\n$ret = fopen($url,'r', false, $context);\n\n$result = fread($ret,1024);\n\nfclose($ret);\n\nif (strpos($http_response_header[0], '200') !== false) {\n\techo \"Message has been sent successfully!\";\n} else {\n\techo \"Send message failed!\";\n}\n"
        - lang: C#
          label: C#
          source: "using System.Net;\nusing System.Text.Json;\n\nstring baseUrl = \"https://smseagleip/api/v2/\";\nstring method = \"messages/sms\";\n\nstring url = baseUrl + method;\n\nstring[] numbers =\n{\n\t\"+481234567\"\n};\n\nint[] contacts = \n{\n  12,\n  15\n};\n\nint[] groups =\n{\n  57,\n  35\n};\n\nstring date = \"2022-12-27T12:20:31+05:01\";\nint priority = 1;\nstring encoding = \"unicode\";\nbool flash = true;\nstring oid = \"123abc456def789ghi123abc456def789ghi\";\nstring validity = \"30m\";\nstring send_after = \"12:05\";\nstring send_before = \"17:15\";\nbool test = true;\nint modem_no = 2;\n\nstring message = \"My message\";\n\nWebClient client = new WebClient();\n\nstring json = JsonSerializer.Serialize(new\n{\n\tto = numbers,\n    contacts = contacts,\n    groups = groups,\n\ttext = message,\n    date = date,\n    priority = priority,\n    encoding = encoding,\n    flash = flash,\n    oid = oid,\n    validity = validity,\n    send_after = send_after,\n    send_before = send_before,\n    test = test,\n    modem_no = modem_no\n});\n\nclient.Headers[HttpRequestHeader.ContentType] = \"application/json\";\nclient.Headers.Add(\"access-token\", \"0005gOjCOlMH8F2BP8\");\nstring response = client.UploadString(new Uri(url), \"POST\", json);\n\nreturn response;\n"
        - lang: cURL
          label: cURL
          source: |
            curl -H "Content-Type: application/json"
                 -H "access-token: 0005gOjCOlMH8F2BP8"
                 -X POST
                 -d '{
                        "to":["+48123456789"],
                        "contacts":[12,15],
                        "groups":[57,35],
                        "text":"My message",
                        "date":"2022-12-27T12:20:31+05:01",
                        "priority":5,
                        "encoding":"unicode",
                        "flash":true,
                        "oid":"123abc456def789ghi123abc456def789ghi",
                        "validity":"30m",
                        "send_after":"12:05",
                        "send_before":"17:15",
                        "test":true,
                        "modem_no":2
                    }'
                 https://smseagleip/index.php/api/v2/messages/sms
        - lang: Powershell
          label: Powershell
          source: >
            $smseagleUrl='https://smseagleip/api/v2/messages/sms'

            $smseagleToken='0005gOjCOlMH8F2BP8'

            $msgTo=@('123456789')

            $msgContacts=@(12,15)

            $msgGroups=@(57,35)

            $msgText='My message'

            $headers = @{
                "Content-Type"="text/plain"
                "access-token"="0005gOjCOlMH8F2BP8"
            }


            $jsonBody=@{
                to=$msgTo;
                contacts=$msgContacts;
                groups=$msgGroups;
                text=$msgText;
                date='2022-12-27T12:20:31+05:01';
                priority=5;
                encoding='unicode';
                flash=$true;
                oid='123abc456def789ghi123abc456def789ghi';
                validity='30m';
                send_after='12:05';
                send_before='17:15';
                test=$true;
                modem_no=2;
            } | ConvertTo-Json -Compress


            Invoke-RestMethod -Uri $smseagleUrl -Headers $headers -Body
            $jsonBody -Method Post
        - lang: VBA
          label: VBA
          source: >
            Set objHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")

            Url = "https://smseagleip/api/v2/"


            numbers = Array("""123456789""", """987654321""")

            NumbersTxt = Join(numbers, ",")


            contacts = Array("12", "15")

            ContactsTxt = Join(contacts, ",")


            groups = Array("57", "35")

            GroupsTxt = Join(groups, ",")


            Message = """My message"""


            Url = Url & "messages/sms"


            objHTTP.Open "POST", Url, False

            objHTTP.setRequestHeader "Content-Type", "application/json"

            objHTTP.setRequestHeader "access-token", "0005gOjCOlMH8F2BP8"


            JSONString = "{""to"":[" & NumbersTxt & "],""contacts"":[" &
            ContactsTxt & "],""groups"":[" & GroupsTxt & "],""text"":" & Message
            & ",""date"": ""2022-12-27T12:20:31+05:01"",""priority"":
            5,""encoding"": ""unicode"",""flash"": true,""oid"":
            ""123abc456def789ghi123abc456def789ghi"",""validity"":
            ""30m"",""send_after"": ""12:05"",""send_before"":
            ""17:15"",""test"": true,""modem_no"": 2}"

            objHTTP.send JSONString

            Debug.Print objHTTP.ResponseText
        - lang: Python
          label: Python
          source: >
            import requests

            import json


            url = "http://smseagleip/api/v2/messages/sms"


            payload = json.dumps({
              "to": [
                "+48123456789"
              ],
              "contacts": [
                12, 15
              ],
              "groups": [
                57, 35
              ],
              "text": "My message",
              "date": "2022-12-27T12:20:31+05:01",
              "priority": 5,
              "encoding": "unicode",
              "flash": True,
              "oid": "123abc456def789ghi123abc456def789ghi",
              "validity": "30m",
              "send_after": "12:05",
              "send_before": "17:15",
              "test": True,
              "modem_no": 2
            })

            headers = {
              'Content-Type': 'application/json',
              'access-token': '0005gOjCOlMH8F2BP8'
            }


            response = requests.request("POST", url, headers=headers,
            data=payload)


            print(response.text)
        - lang: Shell
          label: Shell
          source: |
            wget --no-check-certificate --quiet \
              --method POST \
              --timeout=0 \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'access-token: 0005gOjCOlMH8F2BP8' \
              --body-data '{
              "to": [
                "+48123456789"
              ],
              "contacts": [
                12, 15
              ],
              "groups": [
                57, 35
              ],
              "text": "My message",
              "date": "2022-12-27T12:20:31+05:01",
              "priority": 5,
              "encoding": "unicode",
              "flash": true,
              "oid": "123abc456def789ghi123abc456def789ghi",
              "validity": "30m",
              "send_after": "12:05",
              "send_before": "17:15",
              "test": true,
              "modem_no": 2
            }' \
            'http://smseagleip/api/v2/messages/sms'
        - lang: Java
          label: Java
          source: |
            import java.io.*;
            import java.net.*;
            import org.json.JSONObject;

            public class Main {
                public static void main(String[] args) {
                    try {
                        HttpURLConnection connection = null;
                        OutputStreamWriter writer = null;
                        BufferedReader reader = null;
                        StringBuilder sbuilder = null;
                        URL serverAddress = null;
                        serverAddress = new URL("https://url-of-smseagle/index.php/api/v2/messages/sms");
                        connection = (HttpURLConnection) serverAddress.openConnection();
                        connection.setRequestProperty("Content-Type", "application/json");
                        connection.setRequestProperty("Accept", "application/json");
                        connection.setRequestProperty("access-token", "0005gOjCOlMH8F2BP8");
                        connection.setRequestMethod("POST");
                        connection.setDoOutput(true);
                        connection.connect();
            //
                        writer = new OutputStreamWriter(connection.getOutputStream());

                        JSONObject json = new JSONObject();

                        String[] to = {"481234567"};
                        json.put("to", to);
                        json.put("text", "My message");

                        System.out.println(json);
                        writer.write(json.toString());
                        writer.close();
            //
                        reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        sbuilder = new StringBuilder();
                        String line = null;
                        while ((line = reader.readLine()) != null) {
                            sbuilder.append(line + 'n');
                        }
                        connection.disconnect();
                        reader.close();
                        String result = sbuilder.toString();
                        System.out.println(result);
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
            }
      
  /goip_pause_sms.html:
    post:
      summary: Pause message task
      deprecated: false
      description: >-
        Message description :

        host: Device IP address

        port: Device webpage management port, default value is 80.

                

        When a SMS task is still waiting to be sent in the send queue, one or
        more SMS can be paused.


      tags:
        - Send message
      parameters:
        - name: version
          in: query
          description: |-
            API version
            This document describes specification support only
          required: false
          example: '1.1'
          schema:
            type: string
        - name: username
          in: query
          description: ''
          required: true
          example: Device username
          schema:
            type: string
        - name: password
          in: query
          description: ''
          required: true
          example: Device password
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              tids:
                - - tid1
                - - tid2
            schema:
              type: object
              properties:
                tids:
                  type: array
                  items:
                    type: object
                    properties:
                      tid:
                        type: integer
                        description: Task ID
                  description: Restore one or more tasks ID that are sent.When there is no field, all send tasks are suspended
              
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    examples:
                      - 200
                    description: Interface processing result code
                  reason:
                    type: string
                    description: 'Interface processing results '
                    examples:
                      - OK
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        tid:
                          type: string
                          description: Task ID
                        status:
                          type: string
                          description: Task status code
                          enum:
                            - 0 OK
                            - 1 Invalid User
                            - 2 Invalid Port
                            - 3 USSD Expected
                            - 4 Pending USSD
                            - 5 SIM Unregistered
                            - 6 TImeout
                            - 7 Server Error
                            - 8 SMS expected
                            - 9 TO expected
                            - 10 Pending Transaction
                            - 11 TID Expected
                            - 12 From Expected
                      required:
                        - status
                        - tid
                    description: >-
                      Task processing results.

                      When there is no tids in the request, this field is not
                      included in the result.
                required:
                  - reason
                  - code
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    code: 200
                    reason: OK
                    result:
                      - - tid: 1
                          status: 0 OK
                      - - tid: 2
                          status: 3 USSD Expected
                      
          headers: {}
      security: []
      x-codeSamples:
        - lang: C++
          label: C++
          source: |

            #include <iostream>
            #include <curl/curl.h>
            #include <string>
            
            int main(void) {
              CURL *curl;
              CURLcode res;

              curl = curl_easy_init();
              if(curl) {
                const char *url = "http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root"
                std::string jsonPayload = R"({"tids : [["tid1"],["tid2"]]"});

                struct curl_slist *headers = NULL;
                headers = curl_slist_append(headers,"Content-Type: application/json");
                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

                curl_easy_setopt(curl, CURLOPT_URL, url);
                curl_easy_setopt(curl,CURLOPT_POSTFIELDS, jsonPayload.c_str());

                res = curl_easy_perform(curl);
                if(res != CURLE_OK) {
                  std::cerr << "curl_easy_perform failed: " << curl_easy_strerror(res) << std:: endl;
                }

                curl_easy_cleanup(curl);
                curl_slist_free_all(headers);
              }
              return 0;
            }
        - lang: php
          label: php
          source: |
            
            <?php
            $url = 'http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root';
            $data = json_encode([
              'tids' => [
                ['tid1'],
                ['tid2']
              ]
            ]);

            $options = [
              'http' => [
                'header' = "Content-Type: application/json\r\n",
                'method' => 'POST',
                'content' => $data,
              ],
            ];

              $content = stream_context_create($options);
              $result = file_get_contents($url, false, $context);

              if ($result === FALSE) {
                echo "Request failed!";
              } else {
                echo $result;
              }
            ?>
        - lang: C#
          label: C#
          source: |
            
            using System;
            using System.Net.Http;
            using System.Text;
            using System.Threading.Tasks;

            class Program {
              static async Task Main(string[] args) {
                var url = "htttp://192.168.1.67:80/goip_pause_sms,html?username=root&password=root";
                var payload = new{
                  tids = new[] { new[] { "tid1" }, { "tid2" }};

                  var json = System.Text.Json.JsonSerializer.Serialize(payload);
                  var content = new StringContent(json, encoding utf8, "application/json");

                  using (var client = new HttpClient()) {
                    var response = await client.PostAsync(url, content);
                    var result = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(result);
                  }
                }
              }
            }
        - lang: cURL
          label: cURL
          source: |
            curl -X POST \
              -H "Content-Type: application/json" \
              -d '{"tids: [["tid1"],["tid2"]]"}' \
              http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root
        - lang: PowerShell
          label: PowerShell
          source: >
            
            $url = "http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root"
            $headers = @{
              "Content-Type" = "application/json"
            }
            $body = @{
              tids = @(
                @("tid1")
                @("tid2")
              )
            } | ConvertTo-Json

            $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
            Write-Output $response
        - lang: VBA
          label: VBA
          source: >
            
            Set objHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
            url = "http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root"
            jsonPayload = "{""tids"": [[""tid1""],[""tid2""]]}"
            objHTTP.Open "POST", url, False
            objHTTP.setRequestHeader "Content-Type", "application/json"
            objHTTP.Send jsonPayload

            Debug.Print objHTTP.ResponseText
        - lang: Python
          label: Python
          source: >
            import requests
            import Json

            url = "http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root"
            payload = {
              "tids" : {
                ["tid1"],
                ["tid2"]
              }
            }
            headers = {
              "Content-Type" : "application/json"
            }

            response = requests.post(url, headers=headers, data=json.dumps(payload))
            print(response.text)
        - lang: Shell
          label: Shell
          source: |
            
            wget --no-check-certificate --quiet \
              --method POST \
              --header 'Content-Type: application/json' \
              --body-data '{"tids": [["tid1"],["tid2"]]}' \
              http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root
        - lang: Java
          label: Java
          souce: |
            import java.io.OutputStream;
            import java.net.HttpURLConnection;
            import java.net.URL;

            public class Main {
              public static void main(String[] args) throws Exception {
                URL url = new URL("http://192.168.1.67:80/goip_pause_sms.html?username=root&password=root");
                HttpURLContention conn = (HttpURLContent) url.openConnection();
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Content-Type", "application/json");
                conn.setDoOutput(true);

                String jsonPayload = "{\"tids\": [[\"tid1\"], [\"tid2\"]]}";

                try (OutputStream os = conn.getOutputStream()) {
                  byte[] input = jsonPayload.getBytes("utf-8");
                  os.write(input, 0, input.length);

                  int responseCode = conn.getResponseCode();
                  System.out.println("Response Code: " + responseCode);
                }
              }
            }

            
  /goip_resume_sms.html:
    post:
      summary: Resume paused message task
      deprecated: false
      description: |-
        Resume the sending of one or more suspended SMS tasks. 
        Message description :
        host: Device IP address
        port: Device webpage management port, default value is 80.
      tags:
        - Send message
      parameters:
        - name: version
          in: query
          description: |-
            API version
            This document describes 
            specification support only
          required: false
          example: '1.1'
          schema:
            type: string
        - name: username
          in: query
          description: Device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tids:
                  type: array
                  items:
                    type: object
                    properties:
                      tid:
                        type: string
                        description: Task ID
                    required:
                      - tid
                  description: The task ID to be restored
              required:
                - tids
            example: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                    examples:
                      - 200
                  reason:
                    type: string
                    description: 'Interface processing results '
                    examples:
                      - OK
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        tid:
                          type: string
                        status:
                          type: string
                      required:
                        - status
                        - tid
                    description: >-
                      Task processing results.

                      When there is no tids in the request, this field is not
                      included in the result.
                required:
                  - reason
                  - code
              examples:
                '1':
                  summary: Successful instance
                  value:
                    code: 200
                    reason: OK
                    results:
                      - tid: '1'
                        status: 0 OK
                      - tid: '2'
                        status: 2 Invalid Port
          headers: {}
      security: []
  /goip_remove_sms.html:
    post:
      summary: Delete message task
      deprecated: false
      description: |-
        Delete one or more SMS tasks waiting to be sent in the send queue.
        Message description :
        host: Device IP address
        port: Device webpage management port, default value is 80.
      tags:
        - Send message
      parameters:
        - name: version
          in: query
          description: |-
            API version
            This document describes specification support only
          required: false
          example: '1.1'
          schema:
            type: string
        - name: username
          in: query
          description: Device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                    examples:
                      - 200
                  reason:
                    type: string
                    description: 'Interface processing results '
                    examples:
                      - OK
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        tid:
                          type: string
                          description: Task ID
                        status:
                          type: string
                          description: |-
                            The status code and reason description of 
                            the task
                          enum:
                            - 0 OK
                            - 1 Invalid User
                            - 2 Invalid Port
                            - 3 USSD Expected
                            - 4 Pending USSD
                            - 5 SIM Unregistered
                            - 6 Timeout
                            - 7 Server Error
                            - 8 SMS expected
                            - 9 TO expected
                            - 10 Pending Transaction
                            - 11 TID Expected
                            - 12 From Expected
                      required:
                        - status
                        - tid
                    description: >-
                      Task processing results .

                      If there is no TIDS in the request, this field is not
                      included in the result
                required:
                  - reason
                  - results
                  - code
              examples:
                '1':
                  summary: Successful instance
                  value: "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"results\": [\r\n        {\r\n            \"tid\": \"1\",\r\n            \"status\": \"0 OK\"\r\n        },\r\n        {\r\n            \"tid\": \"2\",\r\n            \"status\": \"3 USSD Expected\"\r\n        },\r\n        ...\r\n    ]\r\n}"
          headers: {}
      security: []
  /goip_get_tasks.html:
    get:
      summary: Query message task
      deprecated: false
      description: |-
        Query the SMS task waiting to be sent in the send queue. 
        Message description :
        host: Device IP address
        port: Device webpage management port, default value is 80.
      tags:
        - Send message
      parameters:
        - name: version
          in: query
          description: |-
            API Version
            This document describes 
            specification support only
          required: false
          example: '1.1'
          schema:
            type: string
        - name: username
          in: query
          description: Device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          schema:
            type: string
        - name: port
          in: query
          description: Send port. Starting from 1
          required: true
          schema:
            type: integer
            examples:
              - 1
              - 32
              - 64
        - name: has_content
          in: query
          description: Whether to bring a text message in the result
          required: false
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
        - name: pos
          in: query
          description: |-
            The starting position of the request. 
            0 represents the 
            beginning of the first task
          required: true
          schema:
            type: integer
        - name: num
          in: query
          description: |-
            The number of 
            Request messages
          required: false
          schema:
            type: integer
            default: 10
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tids:
                  type: array
                  items:
                    type: object
                    properties:
                      tid:
                        type: integer
                        description: Task ID
                    required:
                      - tid
                  description: The task ID to be query.
              required:
                - tids
            example: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    examples:
                      - 200
                    description: Interface processing result code
                  reason:
                    type: string
                    description: 'Interface processing results '
                    examples:
                      - OK
                  total_num:
                    type: integer
                    description: The number of tasks
                  task_num:
                    type: integer
                    description: Query the number of tasks returned
                  tasks:
                    type: array
                    items:
                      type: object
                      properties:
                        tid:
                          type: integer
                          description: Task id
                        from:
                          type: string
                          description: |-
                            One or more (commas, short horizontal 
                            connections) send ports (from 1)
                          default: Device selection
                        to:
                          type: string
                          description: |-
                            One or more (comma connected) message 
                            receiver number.
                        sms:
                          type: string
                          description: Message content
                        chs:
                          type: string
                          description: Code set（utf8|base64）
                          default: Utf-8
                        coding:
                          type: integer
                          description: 'Specifies the encoding of the message sent. '
                          default: 0
                          enum:
                            - 0 Do not specify
                            - 1 USC2
                            - 2 7bit
                        state:
                          type: integer
                          description: Task status
                          enum:
                            - 0 normal
                            - 1 suspended
                      required:
                        - tid
                        - to
                        - state
                    description: Query the returned array of tasks
                required:
                  - reason
                  - tasks
                  - total_num
                  - task_num
                  - code
              examples:
                '1':
                  summary: Successful instance
                  value: "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"total_num\": 5,\r\n    \"task_num\": 2,\r\n    \"tasks\": [\r\n        {\r\n            \"tid\": 1,\r\n            \"from\": \"\",\r\n            \"to\": \"\",\r\n            \"sms\": \"hello123\",\r\n            \"chs\": \"utf-8\",\r\n            \"coding\": 0,\r\n            \"state\": 1\r\n        },\r\n        ...\r\n    ]\r\n}"
          headers: {}
      security: []
  Server or device configuration decision:
    post:
      summary: Sending status report
      deprecated: false
      description: >-
        While SMS send successfully/failed/timeout, device will put the result
        in cache, after meet condition(cache storage full or cache time reached
        ),device will send POST request to report one or more task execute
        result. If it is group sending, device will report execute result
        periodically until all num in this group sending task get a result. 

        Tips： 

        1.tid related to the task ID in the send-sms message. 

        2.sending, sent, failed are accumulated num in one task. 

        3.Sdr(successfully send record) list records between 2 status-report,
        server should keep before details. 

        4.fdr(failed detail record) list records between 2 status-report, server
        should keep before details.
      tags:
        - Send message
      parameters:
        - name: version
          in: query
          description: |-
            API version
            This document describes specification support only
          required: false
          example: '1.1'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: status-report
                    description: Message type
                  rpt_rum:
                    type: string
                    description: Report num
                    default: '1'
                    examples:
                      - '1'
                  rpts:
                    type: array
                    items:
                      type: object
                      properties:
                        tid:
                          type: integer
                          description: Related task ID
                        sending:
                          type: integer
                          description: Total num of SMS in sending
                        sent:
                          type: integer
                          description: Total num of SMS successfully send
                        failed:
                          type: integer
                          description: Total num of SMS failed send
                        unsent:
                          type: integer
                          description: 'Total SMS in cache waiting for send '
                        sdr:
                          type: array
                          items:
                            type: object
                            properties: {}
                            description: |-
                              Success report is a array, 
                              [0]: recipients num index(based on 
                              group sending),int 
                              [1]: num, string 
                              [2]: SMS sending port(1.01,2.02,...), 
                              string 
                              [3]: SMS send timestamp in UTC time, int
                          description: |-
                            Successfully send details(one list for 
                            one num)
                        fdr:
                          type: array
                          items:
                            type: object
                            properties: {}
                            description: >-
                              [0]: recipients num index(based on 

                              group sending),int 

                              [1]: num, string 

                              [2]: SMS sending port(1.01,2.02,...), 

                              string 

                              [3]: SMS send timestamp in UTC time.int

                              [4]: Progress reason, code+details[refer to 1.0
                              API] 

                              [5]: Carrier reason, code+ description. Valid when
                              [4] is failed to send
                          description: Fail send details(one num one list)
                      required:
                        - tid
                        - sending
                        - sent
                        - failed
                        - unsent
                        - sdr
                        - fdr
                    description: Detail status report
                required:
                  - type
                  - rpt_rum
                  - rpts
              examples:
                '1':
                  summary: Successful instance
                  value: "{\r\n    \"type\": \"status-report\",\r\n    \"rpt_rum\": \"1\",\r\n    \"rpts\": [\r\n        {\r\n            \"tid\": 1,\r\n            ...\r\n        },\r\n        {\r\n            \"tid\": 2,\r\n            ...\r\n        },\r\n        ...\r\n    ]\r\n}"
          headers: {}
      security: []
  /goip_get_esims.html:
    get:
      summary: Query ESIM
      deprecated: false
      description: >-
        The write and delete operations for ESIM cannot be completed
        immediately, so when a successful HTTP request is submitted, the status
        field returned is 1, indicating that the task has been submitted but the
        operation has not been performed yet. To know the result of the
        previously submitted operation, it is necessary to use the query ESIM
        interface regularly to obtain various ESIM information and judge the
        value of the status field.

        Message description :

        host: Device IP address

        port: Device webpage management port, default value is 80.
      tags:
        - ESIM
      parameters:
        - name: version
          in: query
          description: |-
            API version  
            1.0: Compatible with
            previous API
            1.1: Support for the description of this document
          required: false
          example: ''
          schema:
            type: string
            examples:
              - '1.0: Compatible with previous API '
              - '1.1: Support for the description of this document'
            default: '1.0'
        - name: username
          in: query
          description: Device Username
          required: true
          example: ''
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          example: ''
          schema:
            type: string
        - name: ports
          in: query
          description: |-
            The specified port number (valued
            from 1)
          required: false
          example: ''
          schema:
            type: string
            default: all
            examples:
              - 'all: all ports'
              - '2: Specify a single port'
              - >-
                1-2, 4: Port numbers separated by short numbers, specifying
                multiple ports, where "-" indicates a continuous port numbe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            example: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                  reason:
                    type: string
                    description: Interface processing result reason
                  count:
                    type: integer
                    description: Number of statistical results
                  ports:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: integer
                          description: Port number (value from 1)eUICC ID
                        eid:
                          type: string
                          description: eUICC ID
                        esim_state:
                          type: string
                          description: If or not the eid is obtained correctly
                          examples:
                            - 0 - no
                            - 1 - yes
                          enum:
                            - '0'
                            - '1'
                        profiles:
                          type: array
                          items:
                            type: object
                            properties:
                              slot:
                                type: integer
                                description: Slot number (value from 1)
                              enabled:
                                type: integer
                                description: If or not the current profile is enabled
                                enum:
                                  - 0
                                  - 1
                              iccid:
                                type: string
                                description: ESIM corresponding iccid
                              ac:
                                type: string
                                description: Activation code
                              cc:
                                type: string
                                description: Confirmation code
                              provider:
                                type: string
                                description: Name of service provide
                              exust:
                                type: integer
                                description: >-
                                  If or not the current slot has been written
                                  into the profile
                                enum:
                                  - 0
                                  - 1
                              op:
                                type: integer
                                description: Profile operation of the current slot
                                enum:
                                  - 0
                                  - 1
                                  - 2
                              status:
                                type: integer
                                description: The current esim profile operation status
                                enum:
                                  - 0
                                  - 1
                                  - 2
                                  - 3
                              reason:
                                type: string
                                description: Causes of operational errors
                            required:
                              - slot
                              - enabled
                              - iccid
                              - ac
                              - cc
                              - provider
                              - exust
                              - op
                              - reason
                              - 01JKF8VV7JBRWYHHFD7G54PRSV
                              - status
                            description: ESIM information array item description
                          description: >-
                            The array of ESIM information for this port, with
                            each ESIM information as follows
                      required:
                        - port
                        - eid
                        - esim_state
                        - profiles
                      description: Description of the query result item
                    description: >-
                      An array of query results. Each result item in the array
                      is as follows
                required:
                  - code
                  - reason
                  - count
                  - ports
              examples:
                '1':
                  summary: Successful instance
                  value:
                    code: 200
                    reason: OK
                    count: 1
                    ports:
                      - port: 5
          headers: {}
      security: []
  /goip_write_esims.html:
    post:
      summary: Write ESIM
      deprecated: false
      description: |-
        The write operations for ESIM  cannot be completed immediately.
        Message description :
        host: Device IP address
        port: Device webpage management port, default value is 80.
      tags:
        - ESIM
      parameters:
        - name: version
          in: query
          description: API version
          required: true
          schema:
            type: string
            default: '1.0'
            examples:
              - '1.0: Compatible with previous API'
              - '1.1: Support for the description of this document'
        - name: username
          in: query
          description: Device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                port:
                  type: integer
                  description: Port number (value from 1)
                slot:
                  type: integer
                  description: Slot number (value from 1)
                ac:
                  type: string
                  description: Activation code
                cc:
                  type: string
                  description: Confirmation code
              required:
                - port
                - slot
                - ac
                - cc
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                    examples:
                      - 200
                  reason:
                    type: string
                    description: Interface processing result reason
                    examples:
                      - OK
                  ports:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: integer
                          description: Port number (value from 1)
                          examples:
                            - 1
                            - 32
                            - 64
                        slot:
                          type: integer
                          description: slot number (value from 1)
                          examples:
                            - 1
                            - 32
                            - 64
                        status:
                          type: integer
                          description: >-
                            The current esim profile submission write operation
                            status,
                      required:
                        - port
                        - slot
                        - status
                      description: Description of the query result item
                    description: An array of query results
                required:
                  - code
                  - reason
                  - ports
              examples:
                '1':
                  summary: Successful instance
                  value: "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"ports\": [\r\n        {\r\n            \"port\": 1,\r\n             ...\r\n        },\r\n        ...\r\n    ]\r\n}"
          headers: {}
      security: []
  /goip_delete_esims.html:
    post:
      summary: Delete ESIM
      deprecated: false
      description: |-
        The delete operations for ESIM cannot be completed immediately.
        Message description :
        host: Device IP address
        port: Device webpage management port, default value is 80.
      tags:
        - ESIM
      parameters:
        - name: version
          in: query
          description: API version
          required: false
          schema:
            type: string
            default: '1.0'
            examples:
              - '1.0: Compatible with previous API'
              - '1.1: Support for the description of this document'
        - name: username
          in: query
          description: Device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                port:
                  type: integer
                  description: port number (value from 1)
                  examples:
                    - 1
                    - 32
                    - 64
                slot:
                  type: integer
                  description: slot number (value from 1)
                  examples:
                    - 1
                    - 32
                    - 64
              required:
                - port
                - slot
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    examples:
                      - 200
                  reason:
                    type: string
                    examples:
                      - OK
                  ports:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: integer
                        slot:
                          type: integer
                        status:
                          type: integer
                          enum:
                            - 1
                            - 2
                            - 3
                      required:
                        - port
                        - slot
                        - status
                required:
                  - code
                  - reason
                  - ports
              examples:
                '1':
                  summary: Successful instance
                  value: "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"ports\": [\r\n        {\r\n            \"port\": 1,\r\n            \"slot\": 1,\r\n            \"status\": 1\r\n        },\r\n        ...\r\n    ]\r\n}"
          headers: {}
      security: []
  /:
    get:
      summary: Receive SMS
      deprecated: false
      description: >-
        1.Device will send SMS to server by POST request, while it get SMS from
        operator. 

        2.While forwarding SMS, device send a request to server first, so even
        device in LAN, and server in a public net, it also can work effectively

        3.URL：Default set by device，server can revise it in SMS sending quest
        message.
      tags:
        - Receive SMS
      parameters:
        - name: version
          in: query
          description: API version
          required: false
          example: '1.1'
          schema:
            type: string
            default: '1.1'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    description: Data type
                  sms_num:
                    type: string
                    description: Total SMS num
                  sms:
                    type: array
                    items:
                      type: string
                    description: >-
                      For saving the bandwidth, SMS content also storage in a
                      array. 

                      [0]: Delivery report flag,0:normal SMS, 1:This is a
                      delivery report 

                      [1]: Receive report(‘1.01’,’1.02’) 

                      [2]: timestamp while device got this SMS 

                      [3]: Sender(If Delivery report flag set to 1, then sender
                      should be SMCC) 

                      [4]: Recipient(If Delivery report flag set to 1,then
                      recipient should be the 

                      original recipient. ) 

                      [5]: SMS content： 

                      Delivery report: "code scts", code is 0 for successful
                      delivery, utf-8 

                      Ordinary SMS: BASE64 encoding of utf-8 
                required:
                  - sms
                  - type
                  - sms_num
              examples:
                '1':
                  summary: Successful instance
                  value: "{\r\n    \"type\": \"recv-sms\",\r\n    \"sms_num\":n,\r\n    \"sms\": [\r\n        [],\r\n    …,\r\n        []\r\n    ]\r\n}"
          headers: {}
      security: []
  /goip_get_sms.html:
    get:
      summary: Query SMS
      deprecated: false
      description: >-
        1.Customers can actively query the SMS received by the device through
        HTTP GET/POST request.

        2.Query process：

        1).Query all messages received by the device without the query
        parameters (except for user-verified parameters). 

        2).Use the value of next_sms returned by the device as the value of the
        sms_id parameter to query subsequent SMS messages. 

        3).If the device restarts, return a different ssrc synchronization
        source ID and return to step 1. 

        4).Repeat step 2

        3.Message description :

        host: Device IP address 

        port: Device webpage management port, default value is 80.
      tags:
        - Query SMS
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          example: root
          schema:
            type: string
        - name: password
          in: query
          description: Device  Password
          required: true
          example: root
          schema:
            type: string
        - name: sms_id
          in: query
          description: Start SMS ID
          required: false
          example: '1'
          schema:
            type: string
        - name: sms_num
          in: query
          description: 'Specify the number of SMS to be queried '
          required: false
          example: 0：Query all SMS
          schema:
            type: string
        - name: sms_del
          in: query
          description: Delete the SMS that has been returned by the query
          required: false
          example: "0：Do not delete，\_1：delete"
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Operation code
                  reason:
                    type: string
                    description: Reason description
                  ssrc:
                    type: string
                    description: >-
                      Synchronization source identifier The device generates a
                      new ssrc each time it runs.So the value changes, re-query
                  sms_num:
                    type: integer
                    description: Number of SMS queried
                  next_sms:
                    type: integer
                    description: The next SMS ID
                  data:
                    type: integer
                    description: >-
                      Queryed SMS content

                      For saving the bandwidth, SMS content also storage in a
                      array. [0]: Delivery report flag,0:normal SMS, 1:This is a
                      delivery report [1]: Receive report(‘1.01’,’1.02’)

                      [2]: timestamp while device got this SMS

                      [3]: Sender(If Delivery report flag set to 1, then sender
                      should be SMCC)

                      [4]: Recipient(If Delivery report flag set to 1,then
                      recipient should be the original recipient. )

                      [5]: SMS content：

                      Delivery report: "code scts", code is 0 for successful
                      delivery, utf-8 Ordinary SMS: BASE64 encoding of utf-8
                required:
                  - code
                  - reason
                  - ssrc
                  - sms_num
                  - next_sms
                  - data
              examples:
                '1':
                  summary: Data
                  value: "{\r\n  \"code\": 0,\r\n  \"reason\": \"OK\",\r\n  \"ssrc\": \"0123456789abcdef\",\r\n  \"sms_num\": 2,\r\n  \"next_sms\": 3,\r\n  \"data\": [\r\n    [\r\n      0,\r\n      \"1B\",\r\n      1466506477,\r\n      \"10010\",\r\n      \"13265825775\",\r\n      \"5bCK5pWs55qE55So5oi377yM5oKo5aW977yB5o6o6I2Q5oKo5L2/55So44CQ5omL5py66JCl5Lia5Y6F44CR5LiA56uZ5byP5YWN5rWB6YeP5pyN5Yqh5bmz5Y+wIGh0dHA6Ly91LjEwMDEwLmNuL2R0Y2Qg77yM6L275p2+5p+l6K+i6K+d6LS544CB5L2Z6aKd5Y+K6K+m5Y2V77yb5oiW5Zue5aSN5Lul5LiL5pWw5a2X5Luj56CB6I635Y+W5oKo6ZyA6KaB55qE5pyN5Yqh77yaDQoxMDEu5b2T5pyI6K+d6LS577ybDQoxMDIu5Y+v55So5L2Z6aKd77ybDQowLuWNh+e6pzRH77ybDQoxLuivnei0ueWPiuenr+WIhu+8mw0KMi7otKbmiLfmn6Xor6LvvJsNCjMu5YWF5YC877ybDQo0LuWuouaIt+acjeWKoe+8mw0KNS7kuJrliqHlip7nkIbvvJsNCjYu5aKe5YC85Lia5Yqh77ybDQo3LuecgeS7veS4k+WMuu+8mw0KOS7ng63ngrnkv4PplIDjgIINCuW5v+S4nOiBlOmAmuOAggAAAAA=\"\r\n    ],\r\n    [\r\n      0\r\n     \"1B\",\r\n      1466506670,\r\n      \"10010\",\r\n      \"13265825775\",\r\n      \"5bCK5pWs55qE55So5oi377yM5oKo5aW977yB5o6o6I2Q5oKo5L2/55So44CQ5omL5py66JCl5Lia5Y6F44CR5LiA56uZ5byP5YWN5rWB6YeP5pyN5Yqh5bmz5Y+wIGh0dHA6Ly91LjEwMDEwLmNuL2R0Y2Qg77yM6L275p2+5p+l6K+i6K+d6LS544CB5L2Z6aKd5Y+K6K+m5Y2V77yb5oiW5Zue5aSN5Lul5LiL5pWw5a2X5Luj56CB6I635Y+W5oKo6ZyA6KaB55qE5pyN5Yqh77yaDQoxMDEu5b2T5pyI6K+d6LS577ybDQoxMDIu5Y+v55So5L2Z6aKd77ybDQowLuWNh+e6pzRH77ybDQoxLuivnei0ueWPiuenr+WIhu+8mw0KMi7otKbmiLfmn6Xor6LvvJsNCjMu5YWF5YC877ybDQo0LuWuouaIt+acjeWKoe+8mw0KNS7kuJrliqHlip7nkIbvvJsNCjYu5aKe5YC85Lia5Yqh77ybDQo3LuecgeS7veS4k+WMuu+8mw0KOS7ng63ngrnkv4PplIDjgIINCuW5v+S4nOiBlOmAmuOAggAAAAA=\"\r\n    ]\r\n  ]\r\n}"
          headers: {}
      security: []
  /goip_get_status.html:
    get:
      summary: Status notification
      deprecated: false
      description: >-
        1.This device will send a HTTP POST request which include the device
        running status information to the SMS server when it reaches either of
        below conditions.

        a.One of device port status changed.

        b.Community period expired.

        2.Message description :

        host: Device IP address

        port: Device webpage management port, default value is 80.
      tags:
        - Status notification
      parameters:
        - name: url
          in: query
          description: |-
            Specific the report URL
            Tips:
            Special characters need do URL encode
            Just need specific once time
          required: false
          schema:
            type: string
        - name: period
          in: query
          description: >-
            Report period

            >0:Report status according to the specified report period,the
            minimum value is 60,the unit is second 

            0:cancel status report
          required: false
          schema:
            type: integer
            default: 60
        - name: all_sims
          in: query
          description: Get all the card status
          required: false
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
        - name: all_slots
          in: query
          description: Get the status of all card slots
          required: false
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: dev-status
                    description: Message type
                  seq:
                    type: integer
                    description: Device status message sequence number, start from 1
                  expires:
                    type: integer
                    default: 180
                    description: Dev-status sending period
                  mac:
                    type: string
                    description: Device MAC
                  ip:
                    type: string
                    description: Device IP address
                  max-ports:
                    type: integer
                    description: Total ports of dev
                  max-slots:
                    type: string
                    default: '1'
                    description: Total SIM slots of deviceice
                  status:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: string
                      required:
                        - port
                    description: Status of device port
                required:
                  - type
                  - mac
                  - ip
                  - status
                  - seq
                  - max-ports
              examples:
                '1':
                  summary: dev-status
                  value: "{\r\n    \"type\": \"dev-status\",\r\n    \"seq\": 1,\r\n    \"expires\": 180,\r\n    \"mac\": \"00-30-f1-01-02-03\",\r\n    \"ip\": \"192.168.1.67\",\r\n    \"max-ports\": 32,\r\n    \"max-slots\": \"4\",\r\n    \"status\": [\r\n        {\r\n            \"port\": \"1A\"\r\n            ...\r\n        },\r\n        {\r\n            \"port\": \"2A\"\r\n            ...\r\n        },\r\n        {\r\n            \"port\": \"3A\"\r\n            ...\r\n        },\r\n        ...\r\n    ]\r\n}"
          headers: {}
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: port-status
                    description: Message type
                  port:
                    type: string
                    description: >-
                      Describe the current working port and SIM slot. Like
                      1.01,1.02.....32.04
                  sim:
                    type: string
                    description: Simpool’s identification
                  seq:
                    type: integer
                    description: The port is incremented from port 1
                  st:
                    type: string
                    description: 'Port status code + detail '
                    enum:
                      - '0'
                      - '1'
                      - '2'
                      - '3'
                      - '4'
                      - '5'
                      - '6'
                      - '7'
                      - '8'
                      - '9'
                      - '11'
                      - '12'
                      - '13'
                      - '14'
                      - '15'
                      - '16'
                  bal:
                    type: number
                    description: SIM card  balance(yy.mm)
                  opr:
                    type: string
                    description: >-
                      SIM card operator name and ID valid while parameter “st”
                      equal to 3 or 4
                    nullable: true
                  sn:
                    type: string
                    description: SIM number
                  imei:
                    type: string
                    description: IMEI of module
                  active:
                    type: integer
                    description: Current card
                    enum:
                      - 0
                      - 1
                  imsi:
                    type: string
                    description: IMSI num of SIM card
                  iccid:
                    type: string
                    description: ICCID num of SIM card
                  inserted:
                    type: integer
                    description: A card is inserted into a slot
                    enum:
                      - 1
                      - 0
                  slot_active:
                    type: integer
                    description: Whether the card slot is enabled
                    enum:
                      - 0
                      - 1
                  sig:
                    type: integer
                    description: Signal value of the module
                    minimum: 0
                    maximum: 31
                  led:
                    type: integer
                    description: Led is enabled or not
                    enum:
                      - 0
                      - 1
                required:
                  - type
                  - port
                  - bal
                  - st
              examples:
                '1':
                  summary: port-status
                  value:
                    type: port-status
                    port: 2B
                    sim: ''
                    seq: 8
                    st: '3'
                    bal: 100
                    opr: 46001 CHINA UNICOM GSM
                    sn: ''
                    imei: '898610599441327'
                    active: 1
                    imsi: '460014978212473'
                    iccid: '89860116289910033431'
                    inserted: 1
                    slot_active: 1
                    sig: 29
                    led: 1
          headers: {}
      security: []
  /goip_get_sms_stat.html:
    get:
      summary: Query SMS statistics
      deprecated: false
      description: >-
        1.The client can actively query the short message statistics of the
        device through the HTTP GET request.

        2.host: Device IP address
           port: Device webpage management port, default value is 80.
      tags:
        - Query SMS statistics
      parameters:
        - name: version
          in: query
          description: API version
          required: false
          example: '1.0'
          schema:
            type: string
        - name: username
          in: query
          description: Device Username
          required: true
          example: xxx
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          example: xxx
          schema:
            type: string
        - name: ports
          in: query
          description: >-
            The specified port number (valued from 1). The values are as
            follows:

            1)all: all ports;

            2)Specify a single port;

            1-2, 4: Port numbers separated by short numbers, specifying multiple
            ports, where "-" indicates a continuous port number;
          required: false
          example: all
          schema:
            type: string
        - name: slots
          in: query
          description: >-
            The specified card slot number (value from 1). The values are as
            follows:

            1).Do not specify: current card

            2)all: all card slots;

            3)2: Specify a single card slot;

            1-2, 4: A card slot number separated by a short number, specifying a
            plurality of card slots, where "-" indicates a continuous card slot
            number;
          required: false
          example: Current card
          schema:
            type: string
        - name: type
          in: query
          description: |-
            Statistic type. The values are as follows:
            1)0: The last hour;
            2)1: The last two hours;
            3)2: today;
            3: cumulative;
          required: false
          example: '0'
          schema:
            type: string
            enum:
              - '0'
              - '1'
              - '2'
              - '3'
            default: '0'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                  reason:
                    type: string
                    description: Interface processing result reason
                  count:
                    type: integer
                    description: Number of statistical results
                  stats:
                    type: array
                    items:
                      type: string
                    description: |-
                      Array of statistical results (stat
                      results are as follows)
                  port:
                    type: integer
                    description: Port number (value from 1)
                  slot:
                    type: integer
                    description: Slot number (value from 1)
                  received:
                    type: integer
                    description: Number of SMS received
                  sent:
                    type: integer
                    description: Number of SMS sent
                  sent_ok:
                    type: integer
                    description: Number of successful SMS sent
                  sent_failed:
                    type: integer
                    description: Number of failed SMS sent
                  con_failed:
                    type: integer
                    description: Number of consecutive failed SMS
                  unsent:
                    type: integer
                    description: Number of unsent SMS
                  sending:
                    type: integer
                    description: Number of SMS being sent
                required:
                  - code
                  - reason
                  - count
                  - stats
                  - port
                  - slot
                  - received
                  - sent
                  - sent_ok
                  - sent_failed
                  - con_failed
                  - unsent
                  - sending
              examples:
                '1':
                  summary: Response
                  value: "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"count\":n,\r\n    \"stats\": [\r\n        {\r\n            \"port\":xxx,…\r\n        },…\r\n    ]\r\n}"
          headers: {}
      security: []
  /goip_get_call_stat.html:
    get:
      summary: Query call statistics
      deprecated: false
      description: >-
        1.The client can actively query the call statistics of the device
        through the HTTP GET request.

        2.Message description :

        host: Device IP address

        port: Device webpage management port, default value is 80.
      tags:
        - Query call statistics
      parameters:
        - name: version
          in: query
          description: API version
          required: false
          schema:
            type: string
            default: '1.0'
            examples:
              - '1.0: Compatible with previous API'
              - '1.1: Support for the description of this documen'
        - name: username
          in: query
          description: Device username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device password
          required: true
          schema:
            type: string
        - name: ports
          in: query
          description: The specified port number (valued from 1)
          required: false
          schema:
            type: string
            examples:
              - 'all: all ports'
              - '2: Specify a single port'
              - >-
                1-2, 4: Port numbers separated by short numbers, specifying
                multiple ports, where "-" indicates a continuous port number
            default: all
        - name: slots
          in: query
          description: ''
          required: false
          schema:
            type: string
            default: Current card
            examples:
              - 'Do not specify: current card'
              - 'all: all card slots'
              - '2: Specify a single card slot'
              - >-
                1-2, 4: A card slot number separated by a short number,
                specifying a plurality of card slots, where "-" indicates a
                continuous card slot number
        - name: type
          in: query
          description: ''
          required: false
          schema:
            type: string
            default: '0'
            enum:
              - '0'
              - '1'
              - '2'
              - '3'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                  reason:
                    type: string
                    description: Interface processing result reason
                  count:
                    type: integer
                    description: Number of statistical results
                  stats:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: integer
                          description: Port number (value from 1)
                        slot:
                          type: integer
                          description: Slot number (value from 1)
                        calls:
                          type: integer
                          description: Number of calling
                        alerted:
                          type: integer
                          description: Number of alerting
                        connected:
                          type: integer
                          description: Number of connected calls
                        con_failed:
                          type: integer
                          description: Number of failed calls
                        nc:
                          type: string
                          description: >-
                            No Carriers success ratio ("n/m"), the numerator n
                            is the success number, and the

                            denominator m is the total number
                        pdd:
                          type: integer
                          description: PDD
                        acd:
                          type: integer
                          description: ACD
                        asr:
                          type: integer
                          description: ASR percentage value
                        tcd:
                          type: integer
                          description: |-
                            Cumulative call duration
                            (minutes)
                        act_tcd:
                          type: integer
                          description: |-
                            Actual cumulative call
                            duration (seconds)
                      required:
                        - port
                        - slot
                        - calls
                        - alerted
                        - connected
                        - con_failed
                        - nc
                        - pdd
                        - acd
                        - asr
                        - tcd
                        - act_tcd
                    description: 'Array of statistical results '
                required:
                  - code
                  - reason
                  - stats
              examples:
                '1':
                  summary: Successful instance
                  value:
                    code: 200
                    reason: OK
                    stats:
                      - port: 1
                        slot: 1
                        calls: 1
                        alerted: 1
                        connected: 1
                        con_failed: 0
                        nc: 0/0
                        pdd: 0
                        acd: 32
                        asr: 100
                        tcd: 1
                        act_tcd: 32
                      - port: 2
                        slot: 1
                        calls: 0
                        alerted: 0
                        connected: 0
                        con_failed: 0
                        nc: 0/0
                        pdd: 0
                        acd: 0
                        asr: 0
                        tcd: 0
                        act_tcd: 0
          headers: {}
      security: []
  /goip_send_cmd.html:
    post:
      summary: Add SIM Card Numbers
      deprecated: false
      description: "Reference： \ninformation in HTTP message Body is a text, many imei parameters modify use & to connect. \tsim_number(n)=xxxx，\nn = (port_number - 1) * slots_per_port + (slot_number - 1), xxx = sim_numbers parameter\nExample:\nsim_number(192)=1358021178&sim_number(196)=123456762221\n192 represents 25.01, where max-slot is 8, and the slot number for 01 is 1. \nSo, 25.01=(25 - 1)*8+(1-1) =192.\n196 represents 25.05, max-slot is 8, and the slot number for 05 is 5. \nSo, \t25.05=(25-1)*8+(5-1)=196."
      tags:
        - 'Send operate command '
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          example: root
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          example: root
          schema:
            type: string
        - name: op
          in: query
          description: ''
          required: true
          example: set
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sim_number(n):
                  type: string
              required:
                - sim_number(n)
            example: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  reason:
                    type: string
                  par_set:
                    type: integer
              examples:
                '1':
                  summary: Successful instance
                  value:
                    code: 0
                    reason: OK
                    par_set: 2
          headers: {}
      security: []
  /In the 'SMS/MMS Settings' menu of the device, the 'MMS Inbox' page allows you to configure the push receiving server address:
    post:
      summary: Receive MMS
      deprecated: false
      description: >-
        At this stage, the main function is to push the received MMS content to
        the configured server address via HTTP.

        MMS content is pushed via HTTP POST. Please refer to the HTTP standard
        for details. Only special HTTP header fields are explained below (Note:
        header fields may not exist). In addition, header fields starting with
        'Emms-' are custom fields, while others are standard HTTP fields:
      tags:
        - Receive MMS
      parameters:
        - name: Emms-Subject
          in: header
          description: MMS subject
          required: false
          example: chatset=US-ASCII
          schema:
            type: string
            examples:
              - charset：Character set, such as UTF-8
        - name: Emms-From
          in: header
          description: MMS sending address
          required: false
          example: type=PLMN;chartset=utf-8
          schema:
            type: string
            examples:
              - 'charset: Character set, such as UTF-8'
              - 'type: Sender address type, usually a phone number, known as PLMN'
        - name: Emms-To
          in: header
          description: MMS receiving address
          required: false
          example: type=PLMN;chartset=utf-8
          schema:
            type: string
            examples:
              - 'charset: Character set, such as UTF-8 '
              - 'type: Sender address type, usually a phone number, known as PLMN'
        - name: Date
          in: header
          description: MMS sending time
          required: false
          example: Thu,28 Mar 2024 09:47:10 GMT
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The specifics need to be decided according to the operator, but
            attention should be paid to the processing of multipart related
            types
          required: false
          example: application/smil
          schema:
            type: string
            examples:
              - Related to specific types
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /goip_send_at.html:
    get:
      summary: AT Command
      deprecated: false
      description: >-
        1.Application will send a HTTP GET request to the device, device will
        return HTTP 200 OK response to the application.

        2.Request URL

        http://host[:port]/goip_send_at.html

        host: device IP address

        port: web port，default is 80，(Optional)
      tags:
        - AT Command
      parameters:
        - name: username
          in: query
          description: 'Device Usuername '
          required: true
          example: root
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          example: root
          schema:
            type: string
        - name: port
          in: query
          description: Which port to send AT(begin with port 1)
          required: true
          example: ''
          schema:
            type: string
        - name: at
          in: query
          description: AT command code
          required: true
          example: ''
          schema:
            type: string
        - name: timeout
          in: query
          description: timeout(second)
          required: false
          schema:
            type: string
            default: '120'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Return code，0 means success
                    enum:
                      - '0'
                      - '1'
                      - '2'
                      - '3'
                      - '4'
                      - '5'
                  reason:
                    type: string
                    description: Reason describe
                  resp:
                    type: string
                    description: AT command response
                  max-port:
                    type: string
                    description: Specify the max port
                  port:
                    type: string
                    description: |-
                      Means available port
                      Notes： 1,3-6,8,10 means port 1，3，4，5，6，8，10 available
              examples:
                '1':
                  summary: Successful instance
                  value: >-
                    Example:

                    http://192.168.1.67/goip_send_at.html?username=root&password=root&port=5&at=ati


                    Response information as follow:


                    {
                        "code": 0,
                        "reason": "OK",
                        "resp": "ati\r\nQuectel_Ltd\r\nQuectel_M35\r\nRevision: M35FAR01A03\r\nOK\r\n"
                    }



                    Notes: # and % will be ignore by the browser, they need to
                    replace by %23 and %2B
          headers: {}
      security: []
  /goip_send_ussd.html:
    get:
      summary: USSD API
      deprecated: false
      description: >
        1.Application will send a HTTP GET request to the device, device will
        return HTTP 200 OK response to the application.

        2.Request URL

        http://host[:port]/goip_send_ussd.html

        host: device IP address

        port: web port，default is 80，(Optional)
      tags:
        - USSD API
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
        - name: port
          in: query
          description: Which port to send ussd(begin with port 1)
          required: true
          schema:
            type: string
        - name: ussd
          in: query
          description: Ussd command code
          required: true
          schema:
            type: string
        - name: timeout
          in: query
          description: timeout (second)
          required: false
          schema:
            type: string
            default: '120'
        - name: retries
          in: query
          description: >-
            Number of failed retries.

            Note: the top-up service should set this field to 0 and check if
            success by USSD query.
          required: false
          schema:
            type: string
            default: '3'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Return code，0 means success
                    enum:
                      - '0'
                      - '1'
                      - '2'
                      - '3'
                      - '4'
                      - '5'
                      - '6'
                  reason:
                    type: string
                    description: Reason describe
                  ussd:
                    type: string
                    description: Ussd command response
                  max-port:
                    type: string
                    description: Specify the max port
                  port:
                    type: string
                    description: |-
                      Means available port
                      Notes： 1,3-6,8,10 means port 1，3，4，5，6，8，10 available
                required:
                  - code
                  - reason
                  - ussd
                  - max-port
                  - port
              examples:
                '1':
                  summary: Successful instance
                  value: "Example:\r\n\r\nhttp://192.168.1.67/goip_send_ussd.html?username=root&passowrd=root&port=5&ussd=123\r\n\r\nResponse information as follow：\r\n{code:0,reason:”OK”,resp:”your balance is 50.00$”}"
          headers: {}
      security: []
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: 分组ID编号
        name:
          type: string
          description: 分组名称
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: 标签ID编号
        name:
          type: string
          description: 标签名称
      xml:
        name: Tag
    tasks:
      type: object
      properties:
        tid:
          type: integer
          description: Task ID
        from:
          type: string
          description: |-
            Use‘,’‘-’to assign more than one port(from
            channel 1)
        to:
          type: string
        to_all:
          type: string
        sms:
          type: string
        chs:
          type: string
      required:
        - from
        - to
        - to_all
        - sms
        - chs
  securitySchemes: {}
servers: []
security: {}

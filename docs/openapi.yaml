openapi: 3.0.1
info:
  title: Ejoin Gateway HTTP API
  description: >
    Welcome to Ejoin Gateway HTTP API documentation. Here you will find details

    to learn about, try, and implement Ejoin Gateway HTTP API.


    # Overview

     This document outlines the HTTP SMS API for devices, covering SMS reception, single and group message sending, and 
     querying the status of sending tasks.


     Building upon the existing "Ejoin SMS Sending API", this version introduces enhanced support for group messaging, 
     multitasking, and status reportingâ€”all within a single request.


     The API remains HTTP-based but now supports POST requests, allowing multiple tasks and status updates to be 
     processed using JSON arrays.
     
     
     <span style="text-decoration: underline;font-weight: bold;font-style: italic">To use the API version 3.0.0, please update the device to version 8.0d or above.</span>

     # Getting Started

     To communicate with the device, you need to specify two key parameters:

     **Host**: The IP address of the target device. This is typically the address assigned to the device within your  local network or via a static IP if accessed remotely.

     **Port**: The port used by the deviceâ€™s web-based management interface. By default, this is set to 80, which is the standard HTTP port. If the device configuration has been customized, be sure to use the updated port number.

     These values are required for constructing the full request URL when calling the API.

     # Postman download url
     
     https://www.postman.com/downloads/


  version: 3.0.0
  x-logo:
    url: ./EAPI-logo.png
    backgroundColor: '#FAFAFA'
    altText: SMS logo
tags:
  - name: Message Operations
    description: |-
      <span style="text-decoration: underline;font-weight: bold;font-style: italic"><a download target="_blank" href="./Message Operations.postman_collection.json">ðŸ’¡Here is the POSTMAN JSON file for Message Operations</a> </span>
  - name: Device Action Commands
    description: |-
       <span style="text-decoration: underline;font-weight: bold;font-style: italic"><a download target="_blank" href="./Device Action Commands.postman_collection.json">ðŸ’¡Here is the POSTMAN JSON file for Device Action Commands</a> </span>
  - name: Status Notification
  - name: Statistics Information
  - name: AT Command
  - name: USSD
  - name: ESIM
  - name: CellLock
    description: |-
      <span style="text-decoration: underline;font-weight: bold;font-style: italic"><a download target="_blank" href="./CellLock.postman_collection.json">ðŸ’¡Here is the POSTMAN JSON file for CellLock</a> </span>
  - name: Number Config
    description: |-
      <span style="text-decoration: underline;font-weight: bold;font-style: italic"><a download target="_blank" href="./NumberConfig.postman_collection.json">ðŸ’¡Here is the POSTMAN JSON file for Number Config</a></span>
    
paths:
  http://host:port/submit_sms_tasks:
    post:
      summary: Send Message Task
      deprecated: false
      description: >-
        
        Tips:

        1. If no port is selected, the device will randomly assign one to each SMS recipient.
        
        
        2. If multiple ports are selected and only one recipient is specified, all selected ports will be used to send 
        SMS to that single recipient.


        3. If multiple ports and multiple recipients are defined, each port will independently send SMS messages to each 
        recipient.
      tags:
        - Message Operations  
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                id:
                  type: number
                  description: Task ID
                from:
                  type: string
                  description: Use`,` `-`to assign more than one port(from channel 1)
                  default: Automatically selected by device
                recipients: 
                  type: array
                  description: One or more recipients
                  items: 
                    type: string
                smsc:
                  type: string
                  description: SMS Service Center Number
                interval_min:
                  type: number
                  description: >-
                    Minimum interval between message sending tasks, **in milliseconds**
                interval_max:
                  type: number
                  description: Maximum interval between message sending tasks, **in milliseconds**
                timeout: 
                  type: number
                  default: 30
                  description: >-
                    Max time while waiting sending result,**in seconds**
                charset:
                  type: string
                  default: UTF-8
                  enum: 
                    - Base64
                    - UTF-8
                    - PDU
                  description: Character coding set
                sms:
                  type: string
                  description: SMS content
                coding:
                  type: integer
                  description: >-
                     Pecific the SMS codes
                     <ul><li> 0 Not assign</li>
                     <li>1 USC2</li>
                     <li>2 7bit</li></ul>
                  enum: 
                    - 0
                    - 1
                    - 2
                  default: 0
                sms_type:
                  type: number
                  description: >-
                     SMS type
                       <ul><li> 0 SMS</li>
                       <li>1 MMS</li>
                       <li>2 MMS with multiple numbers and multiple subject</li><ul>
                  enum: 
                    - 0 
                    - 1 
                    - 2 
                  default: 0
                subject:
                 type: string
                 description: MMS subject,MMS subject format is UTF-8
                 nullable: true
                subjects: 
                  type: array
                  description: Array of MMS subject, **only effective when "sms_type" is 2(mutiple mms)**
                  items:
                    type: object
                    required: 
                      - recipient
                      - subject
                    properties:
                      recipient:
                        type: string
                        description: Receiving Number
                      subject: 
                        type: string
                        description: MMS subject
                attachments: 
                  type: array
                  description: >-
                    MMS attachment, **only effective when "sms_type" is 1(single mms) or 2(mutiple mms)**
                    
                    
                    <span style="font-weight: bold;color: red"-">A maximum of 5 attachments are allowed, with a total size not exceeding 100KB</span>
                  items:
                    type: object
                    required: 
                      - type
                      - content
                    properties:
                      type: 
                        type: string
                        description: Attachment Type
                        enum:
                          - txt
                          - jpg
                          - gif
                          - map3
                      content:
                        type: string
                        description: The content of the attachment, encoded in BASE64 format
                sdr:
                  type: bool
                  description: If enable the successfully send report
                  default: false
                fdr:
                  type: bool
                  default: false
                  description: If enable the failed report
                dr: 
                  type: bool
                  default: false
                  description: If enable SMS delivery report
                flash_sms: 
                  type: bool
                  default: false
                  description: Specifies whether to use Flash SMS for sending.
                sms_count:
                  type: number
                  default: 100
                  description: Status report SMS count for this task, use default value when less than 0
                sms_period:
                  type: number
                  default: 60
                  description: The cycle for status report of this task, in seconds. Set to 0 to disable the status report, or greater than 0 to enable it
                to_all:
                  type: bool
                  default: false
                  description: Whether to use all available ports.
                bcc:
                  type: string
                  description: Blind Carbon Copy
                cc:
                  type: string
                  description: Carbon Copy
              required: 
                - id
                - recipients
                - sms
            example:
              id: 1
              from: 1
              sms: hello
              interval_min: 30000
              interval_max: 50000
              timeout: 30
              charset: UTF-8
              coding: 0
              sms_type: 1
              sdr: true
              fdr: true
              dr: true
              to_all: false
             
              recipients:
                - 18122520012
              attachments: 
                - type: jpg
                  content: 
                  
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                  required:
                    - id
                    - code
                    - reason
                  properties:
                    id: 
                      type: number
                      description: Task ID
                    code: 
                      type: integer
                      minimum: 0
                      maximim: 20
                      description: Interface processing result code
                    reason:
                      type: string
                      description: >-
                        Task status


                         If task status not equal to OK, then means this
                         task not received by device
                            
                         <ul><li>OK</li>
                         <li>Invalid User</li>
                         <li>Invalid Port</li>
                         <li>"USSD" Expected</li>
                         <li>Pending USSD</li>
                         <li>SIM Unregistered</li>
                         <li>Timeout</li>
                         <li>Server Error</li>
                         <li>"SMS" Expected</li>
                         <li>"TO" Expected</li>
                         <li>Pending Transaction</li>
                         <li>"TID" Expected</li>
                         <li>"FROM" Expected</li>
                         <li>Duplicated TaskID</li>
                         <li>Unauthorized</li>
                         <li>Invalid CMD</li>
                         <li>Too Many Task</li>
                         <li>"MMS" Title Expected</li>
                         <li>Too Many "MMS" Attachments</li>
                         <li>"MMS" Attachments Expected</li>
                         <li>"MMS" Attachments Cache size Overlimit</li>
                         </ul>            
              examples:
                '1':
                  summary: Successful instance
                  value:
                    type: task-status
                    task_num: 1
                    tasks:
                      - tid: tid_1
                        status: 0 OK
          headers: {}
      security: []

  http://host:port/pause_sms_tasks:
    post:
      summary: Paused Message Task
      deprecated: false
      description: >

         Pause one or more SMS tasks that are still in the sending queue and have not yet been dispatched. 
        
      tags:
        - Message Operations  
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: number
                  description: >
                    The task ID to be restored
                    Restore all sending tasks when there is no field
            example: 
                - 1
                - 2
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      examples:
                        - 200
                      description: Task ID
                    code:
                      type: number
                      minimum: 0
                      maximum: 12
                      description: Interface processing result code
                      examples:
                        - OK
                    reason:
                      type: array
                      description: >-
                        Task status 
                        
                        
                         If task status not equal to OK, then means this task not received by device
                         <ul>
                         <li>OK</li>
                         <li>Invalid User</li>
                         <li>Invalid Port</li>
                         <li>"USSD" Expected</li>
                         <li>Pending USSD</li>
                         <li>SIM Unregistered</li>
                         <li>Timeout</li>
                         <li>Server Error</li>
                         <li>"SMS" expected</li>
                         <li>"TO" expected</li>
                         <li>Pending Transaction</li>
                         <li>"TID" Expected</li>
                         <li>"From" Expected</li>
                         </ul>      
                required:
                  - reason
                  - code
                  - id
              examples:
                '1':
                  summary: Successful instance
                  value:
                    - id: 1
                      code: 0
                      reason: OK
                    - id: 2
                      code: 0
                      reason: OK
          headers: {}
      security: []
 
  http://host:port/resume_sms_tasks:
    post:
      summary: Resume Message Task
      deprecated: false
      description: |-

        Resume the transmission of one or more previously paused SMS tasks from the sending queue.
       
      tags:
        - Message Operations
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: number
                  description: >
                    The task ID to be restored
                    Restore all sending tasks when there is no field
            example: 
                - 1
                - 2
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      examples:
                        - 200
                      description: Task ID
                    code:
                      type: number
                      minimum: 0
                      maximum: 12
                      description: Interface processing result code
                      examples:
                        - OK
                    reason:
                      type: array
                      description: >-
                        Task status 
                        
                        
                         If task status not equal to OK, then means this task not received by device
                         <ul>
                         <li>OK</li>
                         <li>Invalid User</li>
                         <li>Invalid Port</li>
                         <li>"USSD" Expected</li>
                         <li>Pending USSD</li>
                         <li>SIM Unregistered</li>
                         <li>Timeout</li>
                         <li>Server Error</li>
                         <li>"SMS" expected</li>
                         <li>"TO" expected</li>
                         <li>Pending Transaction</li>
                         <li>"TID" Expected</li>
                         <li>"From" Expected</li>
                         </ul>      
                required:
                  - reason
                  - code
                  - id
              examples:
                '1':
                  summary: Successful instance
                  value:
                    - id: 1
                      code: 0
                      reason: OK
                    - id: 2
                      code: 0
                      reason: OK
          headers: {}
      security: []
  http://host:port/remove_sms_tasks:
    post:
      summary: Delete Message Task
      deprecated: false
      description: |-

        Delete one or more pending SMS tasks that are still queued for sending.
       
      tags:
        - Message Operations
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: number
                  description: >
                    The task ID to be restored
                    Restore all sending tasks when there is no field
            example: 
                - 1
                - 2
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      examples:
                        - 200
                      description: Task ID
                    code:
                      type: number
                      minimum: 0
                      maximum: 12
                      description: Interface processing result code
                      examples:
                        - OK
                    reason:
                      type: array
                      description: >-
                        Task status 
                        
                        
                         If task status not equal to OK, then means this task not received by device
                         <ul>
                         <li>OK</li>
                         <li>Invalid User</li>
                         <li>Invalid Port</li>
                         <li>"USSD" Expected</li>
                         <li>Pending USSD</li>
                         <li>SIM Unregistered</li>
                         <li>Timeout</li>
                         <li>Server Error</li>
                         <li>"SMS" expected</li>
                         <li>"TO" expected</li>
                         <li>Pending Transaction</li>
                         <li>"TID" Expected</li>
                         <li>"From" Expected</li>
                         </ul>      
                required:
                  - reason
                  - code
                  - id
              examples:
                '1':
                  summary: Successful instance
                  value:
                    - id: 1
                      code: 0
                      reason: OK
                    - id: 2
                      code: 0
                      reason: OK
          headers: {}
      security: []
  http://host:port/get_sms_tasks:
    get:
      summary: Query Message Task
      deprecated: false
      description: |-

         Retrieve details of SMS tasks currently queued for sending on the device.
      tags:
        - Message Operations
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                port:
                  type: number
                  description: Port number used for sending SMS tasks
                  minimum: 1
                  maximum: max-port
                index:
                  type: number
                  description: Starting position of the request; 0 indicates starting from the first task
                num:
                  type: number
                  description: Maximum number of tasks to return in this query
                  default: 10
                need_content:
                  type: bool
                  default: false
                  description: Whether to display the content of the SMS task
              required:
                - port
                - index
            example: 
              port: 1
              index: 0
              num: 10
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - id
                    - from
                    - recipients
                    - status
                    - charset
                    - coding
                  properties:
                    id:
                      type: number
                      description: Task ID
                    from:
                      type: string
                      description: Port number used for sending SMS tasks
                    recipients:
                      type: array
                      description: Receiving Number
                      items:
                        type: string
                    status:
                      type: number
                      enum: 
                        - 0
                        - 1
                      description: >-
                        SMS task sending status
                         - 0: Normal
                         - 1: Paused
                    charset:
                      type: string
                      enum: 
                        - utf8
                        - base64
                      description: Character coding set
                    coding:
                      type: string
                      enum: 
                        - none
                        - usc2
                        - 7bit
                      description: Pecific the SMS codes          
                    sms:
                      type: string
                      description: SMS content
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    - id: 5
                      from: 3
                      recipients:
                        - 10086
                      status: 0
                      charset: utf8
                      coding: none
                      sms: 101
                    - id: 6
                      from: 3
                      recipients: 
                        - 10086
                      status: 0
                      charset: utf8
                      coding: none
                      sms: 102
          headers: {}
      security: []
  http://host:port/get_sms_config:
    get:
      summary: Get SMS Report Config
      deprecated: false
      description: |-

        Retrieve SMS report configuration.
       
      tags:
        - Message Operations
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                required:
                  - sms_status_url
                  - sms_status_max
                  - sms_status_period
                  - recv_sms_url
                  - recv_sms_max
                  - recv_sms_period
                properties:
                   sms_status_url:
                     type: string
                     default: "Status Notification URL"
                     description: Target server URL for pushing SMS sending status reports
                   sms_status_max:
                     type: number 
                     default: 100
                     description: >-
                       Maximum cache size for SMS sending status reports. When the number of cached statuses reaches this value, the cached reports are immediately sent to `sms_status_url`, and the timer is reset
                   sms_status_period:
                     type: number
                     default: 30
                     description: >-
                       SMS sending status report interval. When the timer for this interval expires, the cached reports are immediately sent to `sms_status_url`, and the timer is reset
                   recv_sms_url:
                     type: string
                     default: "Status Notification URL"
                     description: Target server URL for forwarding received SMS messages
                   recv_sms_max:
                     type: number
                     default: 1
                     description: >-
                       Maximum cache size for received SMS messages. When the number of cached messages reaches this value, they are immediately sent to `recv_sms_url`, and the timer is reset
                   recv_sms_period:
                     type: number
                     default: 30
                     description: >-
                       Forwarding interval for received SMS messages. When the timer for this interval expires, the cached messages are immediately sent to `recv_sms_url`, and the timer is reset
              examples:
                '1':
                  summary: Successful instance
                  value:
                    sms_status_url: 192.168.1.172
                    sms_status_max: 100
                    sms_status_period: 30
                    recv_sms_url: 192.168.1.176
                    recv_sms_max: 1
                    recv_sms_period: 30
          headers: {}
      security: []
  http://host:port/set_sms_config:
    post:
      summary: Set SMS Report Config
      deprecated: false
      description: |-

        Set SMS report reporting configuration.
       
      tags:
        - Message Operations
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - sms_status_url
                  - sms_status_max
                  - sms_status_period
                  - recv_sms_url
                  - recv_sms_max
                  - recv_sms_period
                properties:
                   sms_status_url:
                     type: string
                     default: "Status Notification URL"
                     description: Target server URL for pushing SMS sending status reports
                   sms_status_max:
                     type: number 
                     default: 100
                     description: >-
                       Maximum cache size for SMS sending status reports. When the number of cached statuses reaches this value, the cached reports are immediately sent to `sms_status_url`, and the timer is reset
                   sms_status_period:
                     type: number
                     default: 30
                     description: >-
                       SMS sending status report interval. When the timer for this interval expires, the cached reports are immediately sent to `sms_status_url`, and the timer is reset
                   recv_sms_url:
                     type: string
                     default: "Status Notification URL"
                     description: Target server URL for forwarding received SMS messages
                   recv_sms_max:
                     type: number
                     default: 1
                     description: >-
                       Maximum cache size for received SMS messages. When the number of cached messages reaches this value, they are immediately sent to `recv_sms_url`, and the timer is reset
                   recv_sms_period:
                     type: number
                     default: 30
                     description: >-
                       Forwarding interval for received SMS messages. When the timer for this interval expires, the cached messages are immediately sent to `recv_sms_url`, and the timer is reset
              examples:
                '1':
                  summary: Successful instance
                  value:
                    sms_status_url: 192.168.1.172
                    sms_status_max: 100
                    sms_status_period: 30
                    recv_sms_url: 192.168.1.176
                    recv_sms_max: 1
                    recv_sms_period: 30
          headers: {}
      security: []
  Server or device configuration decision:
    post:
      summary: Send Status Report
      deprecated: false
      description: >-
        Automatically sends a status report to the server via POST request when SMS tasks succeed, fail, or time out.

        If the task involves group sending, the device will continue reporting status updates until all messages in the 
        group are processed.
        Includes detailed success and failure records with timestamp and sending port. 


        Tips:  


        1.Tid related to the task ID in the send-sms message. 


        2.Sent, failed are accumulated num in one task. 


        3.Sdr(successfully send record) list records between 2 status-report,
        server should keep before details. 


        4.Fdr(failed detail record) list records between 2 status-report, server
        should keep before details.
      tags:
        - Message Operations
      parameters:
        - name: version
          in: query
          description: |-
            API version.
            This document describes specification support only
          required: false
          schema:
            type: string
            default: 1.1
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: sms-sent-status
                    description: Message type
                  statuses:
                    type: array
                    items:
                      type: object
                      properties:
                        tid:
                          type: integer
                          description: Task ID
                        sent:
                          type: integer
                          description: Total num of SMS successfully send
                        failed:
                          type: integer
                          description: Total num of SMS failed send
                        unsent:
                          type: integer
                          description: 'Total SMS in cache waiting for send '
                        sdr:
                          type: array
                          items:
                            type: object
                            properties: 
                              seq:
                                type: integer
                                description: Number index (based on bulk messaging numbers).
                              port:
                                type: integer
                                description: Port Number
                              slot:
                                type: integer
                                description: Slot Number
                              number:
                                type: string
                                description: SIM Number
                              ts:
                                type: integer
                                description: Timestamp of SMS sending
                              cost:    
                                type: integer
                                description: Time taken to send **(in milliseconds)**                         
                          description: |-
                            Successfully send details(one list for 
                            one num)
                        fdr:
                          type: array
                          items:
                            type: object
                            properties: 
                              seq:
                                type: integer
                                description: Number index (based on bulk messaging numbers).
                              port:
                                type: integer
                                description: Port Number
                              slot:
                                type: integer
                                description: Slot Number
                              number:
                                type: string
                                description: SIM Number
                              ts:
                                type: integer
                                description: Timestamp of SMS sending
                              code:    
                                type: integer
                                description: Failure reason code for sending   
                              gsm_cause: 
                                type: integer
                                description: Failure reason code for sending, related to the carrier
                          description: |-
                              Fail send details(one num one list)
                      required:
                        - tid
                        - sent
                        - failed
                        - unsent
                        - sdr
                        - fdr
                    description: Detail status report
                required:
                  - type
                  - statuses
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    type: sms-sent-status
                    statuses:
                      - tid: 5
                        sent: 1
                        failed: 0
                        unsent: 0
                        sdr:
                          - seq: 1
                            port: 1
                            slot: 1
                            number: 10086
                            ts: 174594360
                            cost: 1290
                        fdr: []
                      - tid: 6
                        sent: 0
                        failed: 1
                        unsent: 1
                        sdr: [] 
                        fdr: 
                          - seq: 1
                            port: 3
                            slot: 1
                            number: 10086
                            ts: 1745996361
                            code: 7
                            gsm_cause: 350

          headers: {}
      security: []
  http://host:port/goip_get_esims.html:
    get:
      summary: Query ESIM
      deprecated: false
      description: >-
        Retrieve the status and details of previously submitted eSIM operations.
        Since write/delete operations are asynchronous, this interface provides updates on task progress, including eSIM   
        status, slot usage, and operation results.
      tags:
        - ESIM
      parameters:
        - name: version
          in: query
          description: |-
            API version  
            <ul><li>1.0: Compatible with</li>
            previous API
            <li>1.1: Support for the description of this document</li></ul>
          required: false
          schema:
            type: string
            default: '1.0'
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
        - name: ports
          in: query
          description: >-
            The specified port number (valued
            from 1)
            
            <ul>
            <li>all: all ports</li>
            <li>Specify a single port</li>
            <li>numbers separated by short numbers, specifying multiple ports, <span style="font-weight: bold;color: red">"-"</span> indicates a continuous port number 
            
            
            <span style="font-weight: bold;color: red">Such as "1-3,5"</span> means querying ports 1, 2, 3, and 5</li></ul>
          required: false
          schema:
            type: string
            default: all


      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                  reason:
                    type: string
                    description: Interface processing result reason
                  count:
                    type: integer
                    description: Number of statistical results
                  ports:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: integer
                          description: Port number (value from 1)eUICC ID
                        eid:
                          type: string
                          description: eUICC ID
                        esim_state:
                          type: string
                          description: >-
                            If or not the eid is obtained correctly
                            <ul><li>0 no</li>
                            <li>1 yes</li></ul>
                          enum:
                            - 0
                            - 1
                        profiles:
                          type: array
                          items:
                            type: object
                            properties:
                              slot:
                                type: integer
                                description: Slot number (value from 1)
                              enabled:
                                type: integer
                                description: >-
                                  If or not the current profile is enabled
                                  <ul><li>0 disabled</li>
                                  <li>1 enabled</li></ul>
                                enum:
                                  - 0 
                                  - 1 
                              iccid:
                                type: string
                                description: ESIM corresponding iccid
                              ac:
                                type: string
                                description: Activation code
                              cc:
                                type: string
                                description: Confirmation code
                              provider:
                                type: string
                                description: Name of service provide
                              exist:
                                type: integer
                                description: >-
                                  If or not the current slot has been written
                                  into the profile
                                  <ul><li>0 no</li>
                                  <li>1 yes</li></ul>
                                enum:
                                  - 0
                                  - 1
                              op:
                                type: integer
                                description: >-
                                  Profile operation of the current slot
                                  
                                  <ul><li>0 No operation</li>
                                  <li>1 Writing</li>
                                  <li>2 Deleting</li></ul>
                                enum:
                                  - 0
                                  - 1
                                  - 2
                              status:
                                type: integer
                                description: >-
                                  The current esim profile operation status
                                  <ul><li>0 No operation</li>
                                  <li>1 Operation request submitted</li>
                                  <li>2 Profile operation is in progress on the current port</li>
                                  <li>3 Operation error,the specific reason is described in the reason field</li></ul>
                                enum:
                                  - 0
                                  - 1
                                  - 2
                                  - 3
                              reason:
                                type: string
                                description: Causes of operational errors
                            required:
                              - slot
                              - enabled
                              - iccid
                              - ac
                              - cc
                              - provider
                              - exist
                              - op
                              - reason
                              - 01JKF8VV7JBRWYHHFD7G54PRSV
                              - status
                            description: ESIM information array item description
                          description: >-
                            The array of ESIM information for this port, with
                            each ESIM information as follows
                      required:
                        - port
                        - eid
                        - esim_state
                        - profiles
                      description: Description of the query result item
                    description: >-
                      An array of query results. Each result item in the array
                      is as follows
                required:
                  - code
                  - reason
                  - count
                  - ports
              examples:
                '1':
                  summary: Successful instance
                  value:
                    code: 200
                    reason: OK
                    count: 1
                    ports:
                      - port: 5
                        eid: 123abc456def789ghi
                        esim_state: 1
                        profiles: 
                          - slot: 1
                            enabled: 1
                            iccid: 898604701924xxxxxxxx
                            aa: ""
                            cc: ""
                            provider: China Mobile
                            exist: 1
                            op: 1
                            status: 1
                            reason: ""
          headers: {}
      security: []
  http://host:port/goip_write_esims.html:
    post:
      summary: Write ESIM
      deprecated: false
      description: |-

        Submit a request to write eSIM information to the specified port and slot.
        The operation is **asynchronous**, and its progress should be monitored using the query ESIM interface.
      tags:
        - ESIM
      parameters:
        - name: version
          in: query
          description: >-
            API version
            <ul>
            <li>1.0: Compatible with previous API</li>
              <li>1.1: Support for the description of this document</li></ul>
          schema:
            type: string
            default: '1.0'
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              port: 1
              slot: 1
              ac: ""
              cc: ""
            schema:
              type: object
              properties:
                port:
                  type: integer
                  minimum: 1
                  maximum: max-port
                  description: Port number
                slot:
                  type: integer
                  minimum: 1
                  maximum: 8
                  description: Slot number
                ac:
                  type: string
                  description: Activation code
                cc:
                  type: string
                  description: Confirmation code
              required:
                - port
                - slot
                - ac
                - cc
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                    examples:
                      - 200
                  reason:
                    type: string
                    description: Interface processing result reason
                    examples:
                      - OK
                  ports:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: integer
                          minimum: 1
                          maximum: max-port
                          description: Port number
                        slot:
                          type: integer
                          minimum: 1
                          maximum: 8
                          description: Slot number
                        status:
                          type: integer
                          description: >-
                            The current esim profile submission write operation
                            status
                             
                              - 1 Write request has been submitted
                              - 2 The current port is performing profile operation,submission failed
                              - 3 Other errors,submission failed
                      required:
                        - port
                        - slot
                        - status
                      description: Description of the query result item
                    description: An array of query results
                required:
                  - code
                  - reason
                  - ports
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    code: 200
                    reason: OK
                    ports: 
                      - port: 1
                        slot: 1
                        status: 1
          headers: {}
      security: []
  http://host:port/goip_delete_esims.html:
    post:
      summary: Delete ESIM
      deprecated: false
      description: |-
        Submit a request to delete an eSIM profile from the specified port and slot.
        This operation is **asynchronous**, and its progress should be monitored using the query ESIM interface.
        
      tags:
        - ESIM
      parameters:
        - name: version
          in: query
          description: >-
            API version
            
              - 1.0: Compatible with previous API
              - 1.1: Support for the description of this document
          required: false
          schema:
            type: string
            default: '1.0'
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              port: 1
              slot: 1
            schema:
              type: object
              properties:
                port:
                  type: integer
                  minimum: 1
                  maximum: max-port
                  description: port number
                slot:
                  type: integer
                  minimum: 1
                  maximum: 8
                  description: Slot number
              required:
                - port
                - slot
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: Interface processing result code
                  reason:
                    type: string
                    description: Interface processing result reason
                  ports:
                    type: array
                    description: An array of results
                    items:
                      type: object
                      properties:
                        port:
                          description: Port number
                          minimum: 1
                          maximum: max-port
                          type: integer
                        slot:
                          type: integer
                          description: Slot number
                          minimum: 1
                          maximum: max-port
                        status:
                          type: integer
                          description: >-
                            The current esim profile submission deletionoperation status, with the following values  
                          
                             - 1 The deletion request has been submitted
                             - 2 The current port is performing a profile operation,and the submission failed
                             - 3 Other errors,submission failed
                      required:
                        - port
                        - slot
                        - status
                required:
                  - code
                  - reason
                  - ports
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    code: 200
                    reason: OK
                    ports: 
                      - port: 1
                        slot: 1
                        stauts: 1
          headers: {}
      security: []
  http://host:port/get_status_report_server:
    get:
      summary: Get Status Report Server
      deprecated: false
      description: |-
        Retrieve configuration information related to the device's automatic status report, including **reporting interval, URL, and enabled status.**
        
      tags:
        - Status Notification
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  enable:
                    type: bool
                    description: Indicates whether the device currently has delivery status reporting enabled
                  period:
                    type: number
                    description: >-
                      Status report interval: the value must be no less than 60 seconds. **A value of 0 disables status reporting**
                  url:
                    type: string
                    description: URL of the target server for status report push
                required:
                  - enable
                  - period
                  - url
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    enable: true
                    period: 60
                    url: 192.168.1.171 
          headers: {}
      security: []
  http://host:port/set_status_report_server:
    post:
      summary: Set Status Report Server
      deprecated: false
      description: |-
        Set the configuration for the device's automatic status report, including reporting interval, URL, and enable status.
      tags:
        - Status Notification
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              enbale: true
              url: 192.168.1.172
              period: 60
            schema:
              type: object
              properties:
                enable:
                  type: bool
                  default: false
                  description: Indicates whether the device currently has delivery status reporting enabled
                url:
                  type: string
                  default: ""
                  description: >-
                      Status report interval: the value must be no less than 60 seconds. **A value of 0 disables status reporting**
                period: 
                  type: number
                  description: URL of the target server for status report push
      responses:
        '200':
          description: 'OK'      
          headers: {}
      security: []
  Send dev status notification to the specified server.:
    post:
      summary: Dev Status Notification
      deprecated: false
      description: >-
        The device will send a HTTP POST request which include the device
        running status information to the SMS server when it reaches either of
        below conditions:


        **1.One of device port status changed.**


        **2.Community period expired.**

      tags:
        - Status Notification
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: dev-status
                    description: Message type
                  seq:
                    type: integer
                    description: Device status message sequence number, start from 1
                  expires:
                    type: integer
                    default: 180
                    description: Dev-status sending period
                  mac:
                    type: string
                    description: Device MAC
                  ip:
                    type: string
                    description: Device IP address
                  max-ports:
                    type: integer
                    description: Total ports of dev
                  max-slots:
                    type: string
                    default: 1
                    description: Total SIM slots of deviceice
                  status:
                    type: array
                    items:
                      type: object
                      required:
                        - port
                        - sim
                        - seq
                        - st
                        - imei
                        - active
                        - inserted
                        - slot_active
                        - led
                        - iccid
                        - imsi
                        - sn
                        - opr
                        - bal
                        - sig
                      properties:
                        port:
                          type: string
                          description: Describe the current working port and SIM slot. Like 1.01,1.02.....32.04
                        sim:
                          type: string
                          description: Simpool's identification
                        seq:
                          type: integer
                          description: The port is incremented from port 1
                        st:
                          type: string
                          description: >-
                            Port status code + detail
                                            
                              - 0 No SIM card
                              - 1 Exist idel SIM card
                              - 2 Registering
                              - 3 Registered
                              - 4 Call connected
                              - 5 Nobalance or alarm
                              - 6 Register failed
                              - 7 SIM card locked by device
                              - 8 SIM card locked by operator
                              - 9 Recognize SIM card error
                              - 11 Card Detected
                              - 12 User locked
                              - 13 Port inter-calling
                              - 14 Inter-calling holding
                              - 15 Access Mobile Network
                              - 16 Module Response timeout
                        imei:
                          type: string
                          description: IMEI of module
                        active:
                           type: integer
                           description: >-
                              Current card
                               - 0 no
                               - 1 yes
                           enum:
                             - 0
                             - 1
                        inserted:
                          type: integer
                          description: >-
                              A card is inserted into a slot
                              - 1 yes
                              - 0 no
                          enum: 
                            - 0
                            - 1
                        slot_active:
                          type: interger
                          description: >-
                            Whether the card slot is enabled
                            - 1 yes
                            - 0 no
                          enum:
                            - 0 
                            - 1
                        led:
                          type: interger
                          description: >-
                            Led is enabled or not
                            - 1 yes
                            - 0 no
                          enum:
                            - 0
                            - 1
                        iccid:
                          type: string
                          description: ICCID num of SIM card
                        imsi:
                          type: string
                          description: IMSI num of SIM card
                        sn:
                          type: string
                          description: SIM number
                        opr:
                          type: string
                          description: >-
                            SIM card operator name and ID valid while parameter `st`
                            equal to 3 or 4
                        bal:
                          type: number
                          description:  SIM card  balance(yy.mm)
                        sig:
                          type: integer
                          description: Signal value of the module
                          minimum: 0
                          maximum: 31
                    description: Status of device port
                required:
                  - type
                  - mac
                  - ip
                  - status
                  - seq
                  - max-ports
              examples:
                '1':
                  summary: dev-status
                  value: 
                    type: dev-Status
                    seq: 1
                    expires: 180
                    mac: 00-30-f1-01-02-03
                    ip: 192.168.1.67
                    max-ports: 32
                    max-slots: 4
                    status: 
                      - port: 1A
                        sim: ""
                        seq: 1
                        st: 7
                        imei: 86739075242xxxx
                        active: 1
                        inserted: 1
                        slot_active: 1
                        led: 0
                        iccid: 893510123241310xxxxx
                        imsi: 2680111006xxxxx
                        sn: ""
                        opr: 46000 CHINA MOBILE
                        bal: 0.00
                        sig: 5
                      - ......
          headers: {}
      security: []
  Send port status notification to the specified server.:
    post:
      summary: Port Status Notification
      deprecated: false
      description: >-
        The device will send a HTTP POST request which include the device
        running status information to the SMS server when it reaches either of
        below conditions:


        **1.One of device port status changed.**


        **2.Community period expired.**

      tags:
        - Status Notification
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: port-status
                    description: Message type
                  port:
                    type: string
                    description: >-
                      Describe the current working port and SIM slot. Like
                      1.01,1.02.....32.04
                  sim:
                    type: string
                    description: Simpool's identification
                  seq:
                    type: integer
                    description: The port is incremented from port 1
                  st:
                    type: string
                    description: >-
                      Port status code + detail
                                            
                       - 0 No SIM card
                       - 1 Exist idel SIM card
                       - 2 Registering
                       - 3 Registered
                       - 4 Call connected
                       - 5 Nobalance or alarm
                       - 6 Register failed
                       - 7 SIM card locked by device
                       - 8 SIM card locked by operator
                       - 9 Recognize SIM card error
                       - 11 Card Detected
                       - 12 User locked
                       - 13 Port inter-calling
                       - 14 Inter-calling holding
                       - 15 Access Mobile Network
                       - 16 Module Response timeout
                  bal:
                    type: number
                    description: SIM card  balance(yy.mm)
                  opr:
                    type: string
                    description: >-
                      SIM card operator name and ID valid while parameter `st`
                      equal to 3 or 4
                    nullable: true
                  sn:
                    type: string
                    description: SIM number
                  imei:
                    type: string
                    description: IMEI of module
                  active:
                    type: integer
                    description: >-
                      Current card
                       - 0 no
                       - 1 yes
                    enum:
                      - 0
                      - 1
                  imsi:
                    type: string
                    description: IMSI num of SIM card
                  iccid:
                    type: string
                    description: ICCID num of SIM card
                  inserted:
                    type: integer
                    description: >-
                      A card is inserted into a slot
                       - 1 yes
                       - 0 no
                    enum:
                      - 0
                      - 1
                  slot_active:
                    type: integer
                    description: >-
                      Whether the card slot is enabled
                       - 1 yes
                       - 0 no
                    enum:
                      - 0
                      - 1
                  sig:
                    type: integer
                    description: Signal value of the module
                    minimum: 0
                    maximum: 31
                  led:
                    type: integer
                    description: >-
                      Led is enabled or not
                       - 1 yes
                       - 0 no
                    enum:
                      - 0
                      - 1
                required:
                  - type
                  - port
                  - bal
                  - st
              examples:
                '1':
                  summary: port-status
                  value:
                    type: port-status
                    port: 2B
                    sim: ''
                    seq: 8
                    st: '3'
                    bal: 100
                    opr: 46001 CHINA UNICOM GSM
                    sn: ''
                    imei: '8986105994xxxxx'
                    active: 1
                    imsi: '4600149782xxxxx'
                    iccid: '898601162899100xxxxx'
                    inserted: 1
                    slot_active: 1
                    sig: 29
                    led: 1
          headers: {}
      security: []
      
  http://host:port/get_sms_stats:
    get:
      summary: Query SMS Statistics
      deprecated: false
      description: >-
        The client can actively query the short message statistics of the
        device through the HTTP GET request.
        
        
        If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags:
        - Statistics Information
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
          content:
            application/json:
              example:
                slots:
                  - port: 1
                    slot: 1
                type: 0
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all`: All ports

                       - `n`: Specify a single port, e.g., 2, which indicates port 2

                       - `x-y,z`: Specify multiple ports, with port numbers separated by commas. For consecutive ports, a hyphen can be used, e.g., 1-4,7 to indicate ports 1 to 4 and port 7
                  type:
                    type: number
                    description: >-
                      Statistics type:
                       - 0: Last 1 hour
                       - 1: Last 2 hours
                       - 2: Today
                       - 3: Cumulative
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    port:
                      type: integer
                      description: Port number
                      maximum: max-port
                      minimum: 1
                    slot:
                      type: integer
                      description: Slot number
                      maximum: max-slot
                      minimum: 1
                    received:
                      type: integer
                      description: Number of SMS received
                    sent:
                      type: integer
                      description: Number of SMS sent
                    sent_ok:
                      type: integer
                      description: Number of successful SMS sent
                    sent_failed:
                      type: integer
                      description: Number of failed SMS sent
                    con_failed:
                      type: integer
                      description: Number of consecutive failed SMS
                    unsent:
                      type: integer
                      description: Number of unsent SMS
                    sending:
                      type: integer
                      description: Number of SMS being sent
                  required:
                    - port
                    - slot
                    - received
                    - sent
                    - sent_ok
                    - sent_failed
                    - con_failed
                    - unsent
                    - sending
              examples:
                '1':
                  summary: Response
                  value: 
                     - port: 1
                       slot: 1
                       received: 5
                       sent: 1
                       sent_ok: 1
                       sent_failed: 0
                       con_failed: 0
                       unsent: 0
                       sending: 0
                     - port: 2
                       "...": ""
                     - "..."
          headers: {}
      security: []
  http://host:port/goip_get_call_stat.html:
    get:
      summary: Query Call Statistics
      deprecated: false
      description: >-
        The client can actively query the call statistics of the device through the HTTP GET request.
        
        
        If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags:
        - Statistics Information
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
          content:
            application/json:
              example:
                slots:
                  - port: 1
                    slot: 1
                  - port: 2
                    slot: 1
                type: 0
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all`: All ports

                       - `n`: Specify a single port, e.g., 2, which indicates port 2

                       - `x-y,z`: Specify multiple ports, with port numbers separated by commas. For consecutive ports, a hyphen can be used, e.g., 1-4,7 to indicate ports 1 to 4 and port 7
                  type:
                    type: number
                    description: >-
                      Statistics type:
                       - 0: Last 1 hour
                       - 1: Last 2 hours
                       - 2: Today
                       - 3: Cumulative
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                        - port
                        - slot
                        - calls
                        - alerted
                        - connected
                        - con_failed
                        - nc
                        - pdd
                        - acd
                        - asr
                        - tcd
                        - act_tcd
                  properties:
                    port:
                      type: integer
                      description: Port number
                      minimum: 1
                      maximum: max-port
                    slot:
                      type: integer
                      description: Slot number
                      minimum: 1
                      maximum: max-slot
                    calls:
                      type: integer
                      description: Number of calling
                    alerted:
                      type: integer
                      description: Number of alerting
                    connected:
                      type: integer
                      description: Number of connected calls
                    con_failed:
                      type: integer
                      description: Number of failed calls
                    nc:
                      type: string
                      description: >-
                            No Carriers success ratio ("n/m"), the numerator n
                            is the success number, and the

                            denominator m is the total number
                    pdd:
                      type: integer
                      description: PDD
                    acd:
                      type: integer
                      description: ACD
                      asr:
                        type: integer
                        description: ASR percentage value
                    tcd:
                      type: integer
                      description: |-
                            Cumulative call duration
                            (minutes)
                    act_tcd:
                      type: integer
                      description: |-
                            Actual cumulative call
                            duration (seconds)
              examples:
                '1':
                  summary: Successful instance
                  value:
                    - port: 1
                      slot: 1
                      calls: 1
                      alerted: 1
                      connected: 1
                      con_failed: 0
                      nc: 0/0
                      pdd: 0
                      acd: 32
                      asr: 100
                      tcd: 1
                      act_tcd: 32
                    - port: 2
                      slot: 1
                      calls: 0
                      alerted: 0
                      connected: 0
                      con_failed: 0
                      nc: 0/0
                      pdd: 0
                      acd: 0
                      asr: 0
                      tcd: 0
                      act_tcd: 0
          headers: {}
      security: []
  http://host:port/get_received_smses:
    get:
      summary: Receive SMS
      deprecated: false
      description: >-
        Query process: 


        <ul><li>1.Query all messages received by the device without the query
        parameters (except for user-verified parameters). </li>


        <li>2.Use the value of next_id returned by the device as the value of the
        sms_id parameter to query subsequent SMS messages. </li>


        <li>3.If the device restarts, return a different ssrc synchronization
        source ID and return to step 1. </li>


        <li>4.Repeat step 2</li></ul>
      tags:
        - Message Operations
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device  Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  default: 1
                  type: number
                  description: ID of the SMS to start the query from; **1 indicates the first message in the inbox**
                num: 
                  default: 0
                  type: number
                  description: Maximum number of SMS messages to return in this query, **0 indicates querying all SMS messages**  
            example: 
              id: 1
              num: 0
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ssrc:
                    type: string
                    description: >-
                      Synchronization source identifier. The device generates a
                      new ssrc each time it runs.So the value changes, re-query
                  next_id:
                    type: number
                    description: The next SMS ID
                  smses:
                    type: array
                    items:
                      type: object
                      required:
                        - port
                        - slot
                        - timestamp
                        - from
                        - to
                        - is_report
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                        timestamp:
                          type: string
                          description: Timestamp while device got this SMS
                        from:
                          type: string
                          description: Sender number
                        to:
                          type: string
                          description: Recipient number
                        is_report:
                          type: bool
                          description: Indicates whether it is an SMS delivery report
                        status:
                          type: number
                          description: When `is_report` is true, indicates the delivery status of the SMS; **0 means successfully delivered**
                        sms:
                          type: string
                          description: SMS contentï¼Œencoded in BASE64 using UTF-8; appears when `is_report is` false
                    description: Array of retrieved SMS message information
                required:
                  - ssrc
                  - next_id
                  - smses
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    ssrc: 2cc11d7f57ee0db6c0aa0b7483d02aa4
                    next_id: 3
                    smses:
                      - port: 1
                        slot: 1
                        timestamp: 1745915984
                        from: 8613800755500
                        to: ""
                        is_report: true
                        status: 0
                      - port: 1
                        slot: 1
                        timestamp: 1745915985
                        from: 10086
                        to: ""
                        is_report: false
                        sms: 5bCK5pWs55qE5a6i5oi377yM5oKo5b2T5YmN6K+d6LS55L2Z6aKdNDEuMDHlhYPvvIzlrp7ml7bor53otLkxMi4yMOWFg+OAguWunuaXtuafpeS9memineivt+eCueWHuyBodHRwczovL2R4LjEwMDg2LmNuL0EvdEpveEhRIOaIlueZu+W9leKAnOS4reWbveenu+WKqOKAnUFQUC3mnI3liqHlpKfljoUt5p+l6K+iLeS9memineafpeivouOAguW/g+e6p+acjeWKoe+8jOacn+W+heaCqOeahOKAnDEw5YiG4oCd5ruh5oSP44CC44CQ5Lit5Zu956e75Yqo44CR
          headers: {}
      security: []
  In the 'SMS/MMS Settings' menu of the device, the 'MMS Inbox' page allows you to configure the push receiving server address:
    post:
      summary: Receive MMS
      deprecated: false
      description: >-
        At this stage, the main function is to push the received MMS content to
        the configured server address via HTTP.


        MMS content is pushed via HTTP POST. Please refer to the HTTP standard
        for details. Only special HTTP header fields are explained below (Note:
        header fields may not exist). 
        
        
        In addition, header fields starting with
        'Emms-' are custom fields, while others are standard HTTP fields:
      tags:
        - Message Operations
      parameters:
        - name: Date
          in: header
          description: MMS sending time
          required: false
          example: Thu,28 Mar 2024 09:47:10 GMT
          schema:
            type: string
        - name: Emms-Subject
          in: header
          description: >-
            MMS subject,encoded using BASE64
            
            
            `charset` : encoding format
          required: false
          example: MQ==;charset=US-ASCII
          schema:
            type: string

        - name: Emms-From
          in: header
          description: >-
            MMS sending address,encoded using BASE64
            
            
            `charset` : Character set, such as UTF-8
            
            
            `type` : Sender address type, usually a phone number, known as PLMN
          required: false
          example: KzE3Nzg1MzkzMjMw;type=PLMN;charset=utf-8
          schema:
            type: string
        - name: Emms-To
          in: header
          description: >-
            MMS receiving address,encoded using BASE64
            
            
            `charset` : Character set, such as UTF-8
            
            
            `type` : Sender address type, usually a phone number, known as PLMN
          required: false
          example: KzE3Nzg1MzkzMzcv;type=PLMN;charset=utf-8
          schema:
            type: string
        - name: Emms-Mac
          in: header
          description: The MAC address of the device that received the MMS
          required: false
          example: 00-30-f1-01-02-03
          schema:
            type: string
        - name: Emms-Port
          in: header
          description: The port slot number of the device that received the MMS
          required: false
          example: 2.01
          schema:
            type: string
        - name: Emms-Iccid
          in: header
          description: The ICCID of the SIM that received the MMS
          required: false
          example: 89302610108063017211
          schema:
            type: string
        - name: Emms-Imsi
          in: header
          description: The IMSI of the SIM that received the MMS
          required: false
          example: 302610947313558
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The specifics need to be decided according to the operator, but
            attention should be paid to the processing of multipart related
            types
            
            
            Related to specific types
          required: false
          example: application/smil
          schema:
            type: string
      x-codeSamples:
        - lang: Java
          label: Java
          source: |
            import javax.servlet.http.HttpServletRequest;

            import java.io.*;
            import java.nio.charset.StandardCharsets;
            import java.util.*;

            public class MmsContentExtractor {
                
              /**
               * extract MMS Content
               * @param request
               * @param path
               */
                public static void extractMmsContent(HttpServletRequest request, String path) {
                    try {
                        if (!isMultipartRelated(request)) {
                            System.err.println("Error: Non multipart/related format");
                            return;
                        }
                        String boundary = extractBoundary(request.getContentType());
                        if (boundary == null) {
                            System.err.println("Error: Unable to parse boundary symbol");
                            return;
                        }

                        InputStream inputStream = request.getInputStream();
                        List<MmsPart> parts = parseMmsParts(inputStream, boundary);
                        /*for (MmsPart part : parts) {
                            savePartToFile(part, path);
                        }*/

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                private static boolean isMultipartRelated(HttpServletRequest request) {
                    String contentType = request.getContentType();
                    return contentType != null && contentType.toLowerCase().startsWith("multipart/related");
                }

                private static String extractBoundary(String contentType) {
                    int boundaryIndex = contentType.indexOf("boundary=");
                    if (boundaryIndex == -1) return null;
                    String boundaryPart = contentType.substring(boundaryIndex + "boundary=".length());
                    int semicolonIndex = boundaryPart.indexOf(';');
                    boundaryPart = (semicolonIndex > 0) ? boundaryPart.substring(0, semicolonIndex) : boundaryPart;
                    return boundaryPart.trim().replaceAll("^\"|\"$", "");
                }
                
                /**
                 * Process the remaining content after detecting the end boundary
                 * @param bufferBytes :Current buffer byte array
                 * @param endIndex End :the starting position of the boundary in the buffer zone
                 * @param currentPart :The part currently being processed (may be null)
                 * @param parts :Parsed partial list
                 */
                private static void processRemainingContent(byte[] bufferBytes, int endIndex, MmsPart currentPart, List<MmsPart> parts) {
                    if (currentPart != null) {
                        // Extract the content before the end boundary (check for any preceding \r\n)
                        int contentEnd = endIndex;
                        
                        // If there is \r\n before ending the boundary, it needs to be excluded
                        if (contentEnd >= 2 && bufferBytes[contentEnd - 1] == '\n' && bufferBytes[contentEnd - 2] == '\r') {
                            contentEnd -= 2;
                        }
                        
                        byte[] partContent = Arrays.copyOfRange(bufferBytes, 0, contentEnd);
                        currentPart.setContent(partContent);
                        parts.add(currentPart);
                    }
                }
                
                private static List<MmsPart> parseMmsParts(InputStream inputStream, String boundary) throws IOException {
                    List<MmsPart> parts = new ArrayList<>();
                    byte[] boundaryBytes = ("\r\n--" + boundary).getBytes(StandardCharsets.UTF_8);
                    byte[] endBoundaryBytes = ("\r\n--" + boundary + "--").getBytes(StandardCharsets.UTF_8);
                    byte[] headerEndBytes = "\r\n\r\n".getBytes(StandardCharsets.UTF_8); //Header terminator, 4 bytes
                    
                    ByteArrayOutputStream buffer = new ByteArrayOutputStream();
                    MmsPart currentPart = null;
                    byte[] chunk = new byte[4096];
                    int bytesRead;

                    while ((bytesRead = inputStream.read(chunk)) != -1) {
                      buffer.write(chunk, 0, bytesRead);
                        byte[] bufferBytes = buffer.toByteArray();

                        //End of detection boundary (processing the last part)
                        int endIndex = indexOf(bufferBytes, endBoundaryBytes);
                        if (endIndex != -1) {
                            processRemainingContent(bufferBytes, endIndex, currentPart, parts); //Call an existing method to handle the end boundary
                            buffer.reset(); //Clear the buffer zone
                            break;
                        }

                        //Detecting ordinary boundaries (processing the middle part)
                        int boundaryIndex = indexOf(bufferBytes, boundaryBytes);
                        while (boundaryIndex != -1) {
                            if (currentPart != null) {
                              processRemainingContent(bufferBytes, boundaryIndex, currentPart, parts); //Call an existing method to handle the end boundary
                                currentPart = null;
                            }

                            // Skip the current boundary symbol and process the subsequent data (boundary symbol is \r\n -- boundary, totaling boundaryBytes.length bytes)
                            int nextStart = boundaryIndex + boundaryBytes.length;
                            bufferBytes = Arrays.copyOfRange(bufferBytes, nextStart, bufferBytes.length);
                            buffer.reset();
                            buffer.write(bufferBytes);

                            //Initialize new section, parse header (must find header terminator \r\n\r\n)
                            currentPart = new MmsPart();
                            int headerEnd = indexOf(bufferBytes, headerEndBytes);
                            if (headerEnd == -1) {
                                throw new IOException("The MIME header is incomplete and missing the terminator\r\n\r\n");
                            }
                            byte[] headerBytes = Arrays.copyOfRange(bufferBytes, 0, headerEnd);
                            parsePartHeaders(headerBytes, currentPart); 
                            // Skip the header terminator and start content from behind
                            int contentStart = headerEnd + headerEndBytes.length; 
                            bufferBytes = Arrays.copyOfRange(bufferBytes, contentStart, bufferBytes.length);
                            buffer.reset();
                            buffer.write(bufferBytes); // The buffer now only contains image content (without headers and borders)

                            boundaryIndex = indexOf(bufferBytes, boundaryBytes); // Continue searching for the next boundary symbol
                        }
                    }
                    return parts;
                }

                private static void parsePartHeaders(byte[] headerBytes, MmsPart part) {
                    String headersStr = new String(headerBytes, StandardCharsets.UTF_8);
                    for (String line : headersStr.split("\r\n")) {
                        if (line.contains(":")) {
                            String[] keyValue = line.split(":", 2);
                            part.getHeaders().put(keyValue[0].trim(), keyValue[1].trim());
                        }
                    }
                }

                private static int indexOf(byte[] source, byte[] target) {
                    if (target.length == 0) return 0;
                    int max = source.length - target.length;
                    for (int i = 0; i <= max; i++) {
                        if (source[i] != target[0]) continue; 
                        boolean match = true;
                        for (int j = 1; j < target.length; j++) {
                            if (source[i + j] != target[j]) {
                                match = false;
                                break;
                            }
                        }
                        if (match) return i;
                    }
                    return -1;
                }
                
                private static void savePartToFile(MmsPart part, String filePath) {
                  Map<String, String> headers = part.getHeaders();
                    String fileName = headers.get("Content-Location");
                    if (fileName == null) {
                        fileName = headers.get("Content-ID");
                    }
                    if (fileName == null) {
                        fileName = "extracted_image";
                    }
                    fileName = fileName.replaceAll("^<<|>>$", "");
                  if (headers.containsKey("Content-Type") && headers.get("Content-Type").startsWith("image/")) {
                      String savePath = filePath + fileName;
                      try (FileOutputStream fos = new FileOutputStream(savePath)) {
                          fos.write(part.getContent());
                          System.out.println("Successfully extracted image:" + savePath);
                      } catch (IOException e) {
                          System.err.println("Failed to save image: " + e.getMessage());
                          e.printStackTrace();
                      }
                  }
                }

                private static class MmsPart {
                    private final Map<String, String> headers = new HashMap<>();
                    private byte[] content;

                    public Map<String, String> getHeaders() {
                        return headers;
                    }

                    public void setContent(byte[] content) {
                        this.content = content;
                    }

                    public byte[] getContent() {
                        return content;
                    }
                }
            }
          headers: {}
      security: []
  http://host:port/send_ats:
    post:
      summary: AT Command
      deprecated: false
      description: >-
        Application will send a HTTP GET request to the device, device will
        return HTTP 200 OK response to the application.


        Notes: # and % will be ignore by the browser, they need to
                    replace by %23 and %2B
                      
        
        The API will return a result only after waiting for a certain period to receive the system command response.
        
        
        If the request contains the `ports` field, use the `ports` field; if `slots` is absent but `ports_pattern` is present, use `ports_pattern`; if neither is provided, return an error.
      tags:
        - AT Command
      parameters:
        - name: username
          in: query
          description: 'Device Username '
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                - ports_pattern: 1,2
                  at: ati
                - ports:
                    - 3
                    - 4
                  at: at+csq
              schema:
                type: array
                items:
                  type: object
                  required: 
                    - at
                  properties:    
                    ports:
                      type: array
                      description: >-
                        Port numbers
                      items:
                        type: number
                    ports_pattern:
                      type: string
                      description: >- 
                        Port mode string, with the following values:

                         - `all` `*`: All ports
 
                         - `n`: Specify a single port, e.g., 2, which indicates port 2

                         - `x-y,z` : Specify multiple ports, with port numbers separated by commas. For consecutive ports, a hyphen can be used, e.g., 1-4,7 to indicate ports 1 to 4 and port 7
                    at:
                      type: string
                      description: AT command
                    timeout:
                      type: number
                      default: 120
                      description: Timeout duration(seconds)

      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - port
                    - code
                    - resp
                  properties:
                    port:
                      type: number
                      description: Port number
                    code: 
                      type: number
                      description: >-
                        Reason Code
                        
                        - 0 : OK
                        
                        - 4 : busy
                        
                        - 5 : unavailable
                        
                        - 6 : timeout
                        
                        - 15 : invalid at
                    resp: 
                      type: string
                      description: System response content; when `code` is 0, it represents the reply result of the sent AT command.
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    - port: 1
                      code: 0
                      resp: ati\r\nQuectel_Ltd\r\nQuectel_M35\r\nRevision:M35FAR01A03\r\nOK\r\n
                    - port: 2
                      code: 0
                      resp: ati\r\nQuectel_Ltd\r\nQuectel_M35\r\nRevision:M35FAR01A03\r\nOK\r\n
          headers: {}
      security: []
  http://host:port/send_ussds:
    post:
      summary: USSD
      deprecated: false
      description: >
        Application will send a HTTP GET request to the device, device will
        return HTTP 200 OK response to the application.
        
        
        The API will return a result only after waiting for a certain period to receive the system command response.
        
        
        If the request contains the `ports` field, use the `ports` field; if `slots` is absent but `ports_pattern` is present, use `ports_pattern`; if neither is provided, return an error.
      tags:
        - USSD
      parameters:
        - name: username
          in: query
          description: 'Device Username '
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                - ports_pattern: 1,2
                  ussd: 101*
                  timeout: 60
                - ports:
                    - 3
                    - 4
                  ussd: 102*
                  timeout: 60
              schema:
                type: array
                items:
                  type: object
                  required: 
                    - ussd
                  properties:    
                    ports:
                      type: array
                      description: >-
                        Port numbers
                      items:
                        type: number
                    ports_pattern:
                      type: string
                      description: >- 
                        Port mode string, with the following values:

                         - `all` `*`: All ports
 
                         - `n`: Specify a single port, e.g., 2, which indicates port 2

                         - `x-y,z` : Specify multiple ports, with port numbers separated by commas. For consecutive ports, a hyphen can be used, e.g., 1-4,7 to indicate ports 1 to 4 and port 7
                    ussd:
                      type: string
                      description: USSD command
                    timeout:
                      type: number
                      default: 120
                      description: Timeout duration(seconds)
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - port
                    - code
                    - resp
                  properties:
                    port:
                      type: number
                      description: Port number
                    code: 
                      type: number
                      description: >-
                        Reason Code
                        
                        - 0 : OK
                        
                        - 4 : busy
                        
                        - 5 : unavailable
                        
                        - 6 : timeout
                    resp: 
                      type: string
                      description: System response content; when `code` is 0, it represents the reply result of the sent USSD command.
              examples:
                '1':
                  summary: Successful instance
                  value: 
                    - port: 1
                      code: 0
                      resp: your balance is 50.00$
                    - port: 2
                      code: 5
                      resp: unavailable
          headers: {}
      security: []
  
  http://host:port/set_network_type:
    post:
      summary: Set Network Type
      deprecated: false
      description: >-
         It enables the device to lock onto a specific network type such as **LTE, WCDMA, GSM, or Auto**. The network type configuration is essential for managing which radio network the device connects to, especially when using cell locking features.
         It enables the device to lock onto a specific network type such as **LTE, WCDMA, GSM, or Auto**. The network type configuration is essential for managing which radio network the device connects to, especially when using cell locking features.
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              type: lte
            schema: 
              type: object
              properties:
                type:
                  type: string
                  description: |-
                     Network type.
                     <span style="color: red;font-weight: bold;font-style: italic">Must set net work type to "lte" first for use cell locking function.</span>
                  enum:
                    - auto
                    - gsm
                    - wcdma
                    - lte
              required:
                - type
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/get_network_type:
    get:
      summary: Get Network Type
      deprecated: false
      description: >-
         It allows the user to retrieve the current network type of the device port. It provides information about the network type the device is currently configured to, such as **LTE, WCDMA, GSM, or Auto**. This can be helpful for monitoring or troubleshooting network settings.
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    description: Network type
                    enum:
                      - auto
                      - gsm
                      - wcdma
                      - lte
                required:
                  - type
              examples:
                '1':
                  summary: Successful instance
                  value:
                    type: lte
          headers: {}
      security: []

  http://host:port/scan_serving_cells:
    post:
      summary: Scan Serving Cells
      deprecated: false
      description: >-
         It triggers the scan of the serving cells on device. The scan can help gather information about the current serving cell's network parameters,typically used to analyze or optimize the device's connection to the network by scanning the cells it is serving.
          
          
          The system may require a retry after this delay if the operation isn't completed successfully or if there are issues with the network settings.
          
      
         **Retry-After: 120 seconds**
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              - 1
            schema:
              type: object
              properties:
                ports:
                  type: array
                  minimum: 1
                  maximum: max-port
                  description: Ports number
                  items:
                    type: number
                    description: Port number
              required: 
                - ports
      responses:
        '202':
          description: 'Accepted'
          headers: {}
      security: []
  http://host:port/get_serving_cells:
    get:
      summary: Get Serving Cells
      deprecated: false
      description: >-
         The response provides details about the status and parameters of the serving cells, such as the cell's port, operator, E-UTRA Absolute Radio Frequency Channel Number (EARFCN), Physical Cell ID (PCI), Cell ID (CID), and Reference Signal Receiving Power (RSRP),helps in managing network connections and optimizing performance. 
          
          
          The system may require a retry after this delay if the operation isn't completed successfully or if there are issues with the network settings.
          
      
         **Retry-After: 120 seconds**
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              - 1
            schema:
              type: object
              properties:
                ports:
                  type: array
                  description: Ports number
                  items:
                    type: number
                    description: Port number
              required: 
                - ports
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  port:
                    type: number
                    minimum: 1
                    maximum: max-port
                    description: Port number
                  status:
                    type: string
                    description: >
                       The status of the most recent service base station scan operation
                       
                       
                       <ul><li>idle: No operation</li>
                       
                       
                       <li>waitting: In progress</li>
                       
                       
                       <li>completed: Completed</li>
                       
                       
                       <li>timeout: Timeout</li></ul>
                    default: completed
                    enum: 
                      - idle
                      - waitting
                      - completed
                      - timeout
                  operator:
                    type: string
                    description: Operator ID
                  earfcn:
                    type: number
                    description: E-UTRA Absolute Radio Frequency Channel Number
                  pci:
                    type: number
                    description: Physical cell ID
                  cid:
                    type: string
                    description: Cell ID, HEX string
                  rsrp: 
                    type: number
                    description: Reference signal receiving power
              examples:
                  '1':
                    summary: Successful instance
                    value:
                      port: 1
                      status: completed
                      operator: 46001
                      earfcn: 1650
                      pci: 114
                      cid: 6161001
                      rsrp: -86
              required:
                 - port
                 - status
                 - operator
                 - earfcn
                 - pci
                 - cid
                 - rsrp
          headers: {}
      security: []
  http://host:port/scan_neighbour_cells:
    post:
      summary: Scan Neighbour Cells
      deprecated: false
      description: >-
         It allows the user to initiate a scan of the neighboring cells surrounding the device. The scan can be configured to cover either all operators' cells or just those of the operator corresponding to the device's SIM card. 
         
         
         After the scan request is sent, the device will begin the scan, and a retry might be necessary after 120 seconds if the scan is not completed or encounters issues.It helps in detecting and gathering information about neighboring cells, which is essential for tasks such as network optimization and roaming management.
         
         
         **Retry-After: 120 seconds**
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              type: 1
              range: current
            schema:
              type: object
              properties: 
                port:
                  type: number
                  minimum: 1
                  maximum: max-port
                  description: Port number
                range:
                  type: string
                  description: >
                    Scan range
                    
                    
                    <ul><li>all: All operator</li>
                    
                    
                    <li>current: The operator  corresponding to the SIM card</li></ul>
                  enum: 
                    - all
                    - current
              required: 
                - port
                - range
      responses:
        '202':
          description: 'Accepted'
          headers: {}
      security: []
  http://host:port/get_neighbour_cells:
    get:
      summary: Get Neighbour Cells
      deprecated: false
      description: >-
         It allows the user to retrieve information about the neighboring cells that are detected by the device. It provides detailed information about each neighboring cell, such as the operator, E-UTRA Absolute Radio Frequency Channel Number (EARFCN), Physical Cell ID (PCI), Cell ID (CID), and Reference Signal Receiving Power (RSRP). This information can be helpful for tasks such as network optimization, troubleshooting, or managing cell locking.
          
          
          The system may require a retry after this delay if the operation isn't completed successfully or if there are issues with the network settings.
      
      
         **Retry-After: 120 seconds**
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              - 1
            schema:
              type: object
              properties:
                ports:
                  type: array
                  description: Ports number
                  minimum: 1
                  maximum: max-port
                  items:
                    type: number
                    description: Port number
              required: 
                - ports
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  port:
                    type: number
                    minimum: 1
                    maximum: max-port
                    description: Port number
                  status:
                    type: string
                    description: >
                       The status of the most recent service base station scan operation
                       
                       
                       <ul><li>idle: No operation</li>
                       
                       
                       <li>waitting: In progress</li>
                       
                       
                       <li>completed: Completed</li>
                       
                       
                       <li>timeout: Timeout</li>
                    default: completed
                    enum: 
                      - idle
                      - waitting
                      - completed
                      - timeout
                  cells:
                    type: array
                    description: Cell details
                    items:
                      type: object
                      properties:
                        operator: 
                          type: string
                          description: Operator ID
                        earfcn:
                          type: number
                          description: E-UTRA Absolute Radio Frequency Channel Number
                        pci: 
                          type: number
                          description: Physical cell ID
                        cid:
                          type: string
                          description: Cell ID,HEX string
                        rsrp:
                          type: number
                          description: Reference signal receiving power
                required:
                  - port
                  - status
                  - cells
              examples:
                  '1':
                    summary: Successful instance
                    value:
                      port: 1
                      status: completed
                      cells:
                        - operator: 46000
                          earfcn: 1850
                          pci: 227
                          cid: AC22D0E
                          rsrp: -67
          headers: {}
      security: []
  http://host:port/lock_cells:
    post:
      summary: Lock Cells
      deprecated: false
      description: >-
         It allows the user to lock specific cells on the device,  The device will lock onto a cell specified by its E-UTRA Absolute Radio Frequency Channel Number (EARFCN) and Physical Cell ID (PCI). Locking a cell can be useful for optimizing network performance,restricting the device to a specific network cell,ensuring stable connectivity.
         
         
         The system may require a retry after this delay if the lock operation isn't completed successfully or if there are issues with the network settings.
         
         
         **Retry-After: 120 seconds**
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              port: 1
              earfcn: 1850
              pci: 227
            schema: 
              type: object
              properties:
                port:
                  type: number
                  minimum: 1
                  maximum: max-port
                  description: Port number
                earfcn: 
                  type: number
                  description: E-UTRA Absolute Radio Frequency Channel Number
                pci:
                  type: number
                  description: Physical cell ID
              required: 
                - port
                - earfcn
                - pci
      responses:
        '202':
          description: 'Accepted'
          headers: {}
        '503':
          description: >-
             Service Unavailable.<span style="color: red;font-weight: bold;font-style: italic">Please set the network type to 'lte' first to enable the cell locking function.</span>
          headers: {}
      security: []
  http://host:port/query_cells_locking_status:
    post:
      summary: Query Lock Cells
      deprecated: false
      description: >-
         It enables the user to query the locking status of cells on the device. It accepts a list of ports and checks whether any of the corresponding ports have a cell lock applied. The response will indicate whether the request was accepted, and the status of the lock operation can be further queried.
         
         
         The system may require a retry after this delay if the operation isn't completed successfully or if there are issues with the network settings.
         
      
         **Retry-After: 120 seconds**
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              - 1
            schema:
              type: object
              properties:
                ports:
                  type: array
                  description: Ports number
                  minimum: 1
                  maximum: max-port
                  items:
                    type: number
                    description: Port number
              required: 
                - ports
      responses:
        '202':
          description: 'Accepted'
          headers: {}
      security: []
  http://host:port/unlock_cells:
    post:
      summary: UnLock Cells
      deprecated: false
      description: >-
         It allows the user to unlock previously locked cells on the device. By specifying the E-UTRA Absolute Radio Frequency Channel Number (EARFCN) and Physical Cell ID (PCI), the device will release the lock from the specified cell, allowing it to connect to other available cells.
         
         
         The system may require a retry after this delay if the unlock operation isn't completed successfully or if there are issues with the network settings.
                
      
         **Retry-After: 120 seconds**
      tags:
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            example: 
              port: 1
              earfcn: 1850
              pci: 227
            schema: 
              type: object
              properties:
                port:
                  type: number
                  minimum: 1
                  maximum: max-port
                  description: Port number
                earfcn: 
                  type: number
                  description: E-UTRA Absolute Radio Frequency Channel Number
                pci:
                  type: number
                  description: Physical cell ID
              required: 
                - port
                - earfcn
                - pci
      responses:
        '202':
          description: 'Accepted'
          headers: {}
      security: []
  http://host:port/set_cell_config:
    post:
      summary: Set Cell Config
      deprecated: false
      description: >-
         If **report_url** is set, when the requested base station operation is completed or times out, the device will push content to the **report_url**.
      tags: 
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                report_url:
                  type: string
                  description: Report/Result Push URL
                  example: 192.168.1.156
                timeout:
                  type: number
                  description: Cell operation timeout, in seconds. If the operation is not completed within the timeout period and a **report_url** is set, the device will push a result with **status** set to timeout
                  default: 120
                  example: 180
              
      responses:
        '200':
          description: 'The content pushed by the device to **report_url** is as follows:'
          content:
            application/json:
              schema:
                type: object
                properties:
                  serving_cells:
                    type: array
                    description: >-
                       A serving cells array.  
                       For more details, please refer to **Get Serving cells**.
                    items: 
                     type: object
                     properties:
                       port:
                         type: number
                         description: Port number
                       status:
                         type: string  
                         description: The status of the most recent service base station scanning operation
                       operator: 
                         type: string
                         description: Operator ID
                       earfcn:
                         type: number
                         description: E-UTRA Absolute Radio Frequency Channel Number
                       pci:
                         type: number
                         description: Physical cell ID
                       cid:
                         type: string
                         description: Cell ID,HEX string
                       rsrp:
                         type: number
                         description: Reference signal receiving power
                  neighbour_cells:
                    type: array
                    description: >-
                       A neighbour cells array.
                       For more details,please refer to **Get Neighbour Cell**.
                    items: 
                     type: object
                     properties:
                       port:
                         type: number
                         description: Port number
                       status:
                         type: string
                         description: The status of the most recent service base station scanning operation
                       cells:
                         type: array
                         description: Cell details
                         items:
                           type: object
                           properties:
                             operator:
                               type: string
                               description: Operator ID
                             earfcn:
                               type: number
                               description: E-UTRA Absolute Radio Frequency Channel Number
                             pci:
                               type: number
                               description: Physical cell ID
                             cid:
                               type: string
                               description: Cell ID,HEX string
                             rsrp:
                               type: number
                               description: Reference signal receiving power
                  locking_status:
                    type: array
                    description: >-
                       A status array.
                       For more details,please refer to **Get Cells Locking Status**.
                    items: 
                     type: object
                     properties:
                       port:
                         type: number
                         description: Port number
                       status:
                         type: number
                         description: The status of the most recent service base station scanning operation
                       action:
                         type: number
                         description: Locking action
                       earfcn:
                         type: number
                         description: E-UTRA Absolute Radio Frequency Channel Number
                       pci:
                         type: number
                         description: Physical cell ID
                       action_status:
                         type: number
                         description: Locking action status
                required:
                  - serving_cells
                  - neighbour_cells
                  - locking_status

              examples:
                '1': 
                  summary: Example
                  value:
                    serving_cells:
                      - port: 1
                        status: completed
                        operator: 46000
                        earfcn: 1300
                        pci: 300
                        cid: AC22D0B
                        rsrp: -86
                    neighbour_cells:
                      - port: 1
                        status: completed
                        cells:
                          - operator: 46000
                            earfcn: 3590
                            pci: 98
                            cid: AC22D0E
                            rsrp: -67
                    locking_cells:
                      - port: 1
                        status: completed
                        action: 0
                        earfcn: ""
                        pci: ""
                        action_status: 0
          headers: {}
      security: []
  http://host:port/get_cell_config:
    get:
      summary: Get Cell Config
      deprecated: false
      description: 
      tags: 
        - CellLock
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      
      responses:
        '202':
          description: 'Accepted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_url:
                    type: string
                    description: Report/Result Push URL
                  timeout:
                    type: number
                    description: Cell operation timeout, in seconds. If the operation is not completed within the timeout period and a **report_url** is set, the device will push a result with **status** set to timeout
                    default: 120
                required:
                  - report_url
                  - timeout
              examples:
                '1':
                  summary: Successful instance
                  value:
                    report_url: 192.168.1.156
                    timeout: 180
          headers: {}
      security: []  

  http://host:port/get_number_config:
    get:
      summary: Get Number Config
      deprecated: false
      description: >-
         It allows the user to retrieve the number configuration settings for device, provides detailed information about the operator's configuration, including the method used for querying phone numbers, commands, and the phone number format.
      tags: 
        - Number Config
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string                
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  config:
                    type: array
                    description: Query result number configuration information
                    items:
                      type: object
                      properties:
                        operator_id: 
                          type: string
                          description: Operator ID
                        operator_name:
                          type: string
                          description: Operator Name
                        method: 
                          type: string
                          description: >-
                            The method used to query the phone number
                          enum: 
                            - none
                            - ussd
                            - sms
                            - sim
                        command:
                          type: string
                          description: The command used to query the phone number, **encoded using BASE64**
                        keyword:
                          type: string
                          description: The keyword used to match the phone number in the query result,**encoded using BASE64**
                        valid_chars:
                          type: string
                          description: Valid character set, **encoded using BASE64**
                        dst_number:
                          type: string
                          description: Service phone number	
                        recv_number:
                          type: string 
                          description: Receive phone number
                        old_prefix: 
                          type: string
                          description: Prefix to be replaced
                        new_prefix:
                          type: string
                          description: >-
                            New prefix after replacement:  When the retrieved number matches the `old_prefix`, replace `old_prefix` with `new_prefix`
                      required:
                        - operator_id
                        - operator_name
                        - method
                        - command
                        - keyword
                        - valid_chars
                        - dst_number
                        - recv_number
                        - old_prefix
                        - new_prefix
                required:
                  - config
              examples:
                '1':
                  summary: Successful instance
                  value:
                    - operator_id: 46011
                      operator_name: CHN-CT
                      method: none
                      command: ""
                      keyword: ""
                      valid_chars: ""
                      dst_number: ""
                      recv_number: ""
                      old_prefix: ""
                      new_prefix: ""
                    - operator_id: 46000
                      operator_name: CHINA MOBILE
                      method: sms
                      command: MTAx
                      keyword: 5bCK5pWs55qE
                      valid_chars: dXRmLTg=
                      dst_number: 10086
                      recv_number: ""
                      old_prefix: 861
                      new_prefix: 1
          headers: {}
      security: []
  http://host:port/set_number_config:
    post:
      summary: Set Number Config
      deprecated: false
      description: >-
         It updates the number configuration settings for device. It allows you to specify the method for querying phone numbers, commands, keywords, and other parameters related to number retrieval and processing. 
         
         
         This configuration can include changes to the operator ID, query method (USSD, SMS, SIM), and prefix replacement rules. **If a parameter is missing from the request, it will be updated to a null value**.
      tags: 
        - Number Config
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              - operator_id: 46011
                method: ussd
                command: "IzEwMQ=="
                keyword: "5Y+356CB"
                valid_chars: "dXRmLTg="
                dst_number: "MTAwMTE="
                recv_number: ""
                old_prefix: "ODY="
                new_prefix: "MQ=="
              - operator_id: 46000
                method: sms
                command: ""
                keyword: ""
                valid_chars: "dXRmLTg="
                dst_number: ""
                recv_number: ""
                old_prefix: ""
                new_prefix: ""
            schema:
              type: object
              required:
                - config
              properties:
                config:
                  type: array
                  description: >-
                      Number configuration parameters
                  
                  
                      Please use **Get Number Config** to query the number configuration first, and make sure the operator ID to be modified exists
                      
                      
                      A certain parameter in the array is missing from the request; this parameter will be **updated to a null value**
                  items:
                    type: object
                    required:
                      - operator_id
                      - method
                    properties:
                      operator_id: 
                        type: string
                        description: Operator ID
                      method: 
                        type: string
                        enum: 
                          - none
                          - ussd
                          - sms
                          - sim
                        description: The method used to query the phone number
                      command: 
                        type: string
                        description: The command used to query the phone number, **encoded using BASE64**
                      keyword:
                        type: string
                        description: The keyword used to match the phone number in the query result,**encoded using BASE64**
                      valid_chars:
                        type: string
                        description: Valid character set, **encoded using BASE64**
                      dst_number:
                        type: string
                        description: Service phone number
                      recv_number:
                        type: string
                        description: Receive phone number
                      old_prefix:
                        type: string
                        description: Prefix to be replaced
                      new_prefix:
                        type: string
                        description: >-
                          New prefix after replacement: When the retrieved number matches the `old_prefix`, replace `old_prefix` with `new_prefix`
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/lock_sims:
    post:
      summary: Lock SIMs
      deprecated: false
      description: >-
        Lock the target port.
        
        
         If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                slots_pattern: 1-3
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all` `*`: All ports
 
                       - `*`: All SIM slots  
                       - `n.a`: Slot `a` of port `n`  
                       - `n-m`: All SIM slots in the range of ports from `n` to `m`  
                       - `n.a-m.c`: All SIM slots from slot `a` of port `n` to slot `c` of port `m`  
                       - `n,m`: All SIM slots of ports `n` and `m`
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/unlock_sims:
    post:
      summary: UnLock SIMs
      deprecated: false
      description: >-
        UnLock the target port.
        
        
         If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                slots_pattern: 1-3
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all` `*`: All ports
 
                       - `*`: All SIM slots  
                       - `n.a`: Slot `a` of port `n`  
                       - `n-m`: All SIM slots in the range of ports from `n` to `m`  
                       - `n.a-m.c`: All SIM slots from slot `a` of port `n` to slot `c` of port `m`  
                       - `n,m`: All SIM slots of ports `n` and `m`
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/switch_sims:
    post:
      summary: Switch SIMs
      deprecated: false
      description: >-
        The SIM slot number currently in use on the switched port.

        
        
         If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                slots_pattern: 1.01-32.01
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all` `*`: All ports
 
                       - `*`: All SIM slots  
                       - `n.a`: Slot `a` of port `n`  
                       - `n-m`: All SIM slots in the range of ports from `n` to `m`  
                       - `n.a-m.c`: All SIM slots from slot `a` of port `n` to slot `c` of port `m`  
                       - `n,m`: All SIM slots of ports `n` and `m`
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/reboot_modems:
    post:
      summary: Reboot Modems
      deprecated: false
      description: >-
        Restart the target module.

        
        
         If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                slots_pattern: 1,2
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all` `*`: All ports
 
                       - `n`: Specify a single port, e.g., 2, which indicates port 2

                       - `x-y,z` : Specify multiple ports, with port numbers separated by commas. For consecutive ports, a hyphen can be used, e.g., 1-4,7 to indicate ports 1 to 4 and port 7
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/on_leds:
    post:
      summary: Turn on LED
      deprecated: false
      description: >-
        Turn on the LED light on the specified SIM slot or port of the device.

        
        
        If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                slots_pattern: 1-5
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all` `*`: All ports
 
                       - `*`: All SIM slots  
                       - `n.a`: Slot `a` of port `n`  
                       - `n-m`: All SIM slots in the range of ports from `n` to `m`  
                       - `n.a-m.c`: All SIM slots from slot `a` of port `n` to slot `c` of port `m`  
                       - `n,m`: All SIM slots of ports `n` and `m`
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/off_leds:
    post:
      summary: Turn off LED
      deprecated: false
      description: >-
        Turn off the LED light on the specified SIM slot or port of the device.

        
        If the request contains the `slots` field, use the `slots` field; if `slots` is absent but `slots_pattern` is present, use `slots_pattern`; if neither is provided, return an error.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                slots_pattern: 1-5
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  slots_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all` `*`: All ports
 
                       - `*`: All SIM slots  
                       - `n.a`: Slot `a` of port `n`  
                       - `n-m`: All SIM slots in the range of ports from `n` to `m`  
                       - `n.a-m.c`: All SIM slots from slot `a` of port `n` to slot `c` of port `m`  
                       - `n,m`: All SIM slots of ports `n` and `m`
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/set_numbers:
    post:
      summary: Set SIM Numbers
      deprecated: false
      description: >-
         Set a custom number for a specific port and SIM slot.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                - port: 1
                  slot: 1
                  number: 13306633214
              schema:
                type: array
                description:
                items:
                  type: object
                  required: 
                    - port
                    - slot
                    - number
                  properties:
                    port:
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Port number
                    slot: 
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Slot number
                    number: 
                      type: string
                      description: SIM number                    
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/get_numbers:
    get:
      summary: Get SIM Numbers
      deprecated: false
      description: >-
         Retrieve the configured number for that port and slot.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string               
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                description:
                items:
                  type: object
                  required: 
                    - port
                    - slot
                    - number
                  properties:
                    port:
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Port number
                    slot: 
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Slot number
                    number: 
                      type: string
                      description: SIM number   
              examples:
                '1':
                  summary: Successful instance
                  value:
                    - port: 1
                      slot: 1
                      number: 100001
                    - port: 1
                      slot: 2
                      number: 100002
                    - ...: ...
          headers: {}
      security: []
  http://host:port/set_imeis:
    post:
      summary: Set IMEI
      deprecated: false
      description: >-
         Set a specific IMEI for a given port and SIM slot.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                - port: 1
                  slot: 1
                  imei: 000000000000
              schema:
                type: array
                description:
                items:
                  type: object
                  required: 
                    - port
                    - slot
                    - imei
                  properties:
                    port:
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Port number
                    slot: 
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Slot number
                    imei: 
                      type: string
                      description: SIM IMEI                    
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/get_imeis:
    get:
      summary: Get IMEI 
      deprecated: false
      description: >-
         Retrieve the IMEI configured for that port and slot.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string               
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                description:
                items:
                  type: object
                  required: 
                    - port
                    - slot
                    - imei
                  properties:
                    port:
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Port number
                    slot: 
                      type: number
                      minimum: 1
                      maximum: max-port
                      description: Slot number
                    imei: 
                      type: string
                      description: SIM IMEI   
              examples:
                '1':
                  summary: Successful instance
                  value:
                    - port: 1
                      slot: 1
                      imei: 000000000001
                    - port: 1
                      slot: 2
                      imei: 000000000002
                    - ...: ...
          headers: {}
      security: []
  http://host:port/get_device_status:
    get:
      summary: Get Dev Status
      deprecated: false
      description: >-
         Immediately query detailed status information of the current device.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: dev-status
                    description: Message type
                  seq:
                    type: integer
                    description: Device status message sequence number, start from 1
                  expires:
                    type: integer
                    default: 180
                    description: Dev-status sending period
                  mac:
                    type: string
                    description: Device MAC
                  ip:
                    type: string
                    description: Device IP address
                  ver:
                    type: string
                    description: Device version
                  max-ports:
                    type: integer
                    description: Total ports of device
                  max-slot:
                    type: integer
                    description: Total SIM slots of deviceice
                  status:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: string
                          description: Describe the current working port and SIM slot
                        sim:
                          type: string
                          description: Simpool's identification
                        seq:
                          type: integer
                          description: The port is incremented from port 1
                        st:
                          type: integer
                          description: >-
                            Port status code
                            
                            
                            <ul>
                            <li>0 : No SIM card</li>
                            <li>1 : Exist idel SIM card</li>
                            <li>2 : Registering</li>
                            <li>3 : Registered</li>
                            <li>4 : call connected</li>
                            <li>5 : no balance or alarm</li>
                            <li>6 : Register failed</li>
                            <li>7 : SIM card locked by device</li>
                            <li>8 : SIM card locked by operator</li>
                            <li>9 : Recognize SIM card error</li>
                            <li>11 : Card Detected</li>
                            <li>12 : User locked</li>
                            <li>13 : Port inter-calling</li>
                            <li>14 : Inter-calling holding</li>
                            <li>15 : Access Mobile Network</li>
                            <li>16 : module Response timeout</li></ul>
                        imei:
                          type: string
                          description: IMEI of module
                        active:
                          type: int
                          description: >-
                            Current card
                            
                            
                            <ul><li>1 : yes</li><li>0 : no</li></ul> 
                        inserted: 
                          type: int
                          description: >-
                            A card is inserted into a slot
                            
                            
                            <ul><li>1 : yes</li><li>0 : no</li></ul>
                        slot_active: 
                          type: int
                          description: >-
                            Whether the card slot is enabled
                            
                            
                            <ul><li>1 : enabled</li><li>0 : disabled</li></ul>
                        led: 
                          type: int
                          description: >-
                            Current card
                            
                            
                            <ul><li>1 : yes</li><li>0 : no</li></ul> 
                        iccid:
                          type: string
                          description: ICCID num of SIM card 
                        imsi: 
                          type: string
                          description: IMSI num of SIM card
                        sn: 
                          type: string
                          description: SIM number 
                        opr:
                          type: string
                          description: SIM card operator name and ID valid while parameter "st" equal to 3 or 4
                        bal:
                          type: float
                          description: SIM card balance(yy.mm)
                        sig:
                          type: int
                          description: Signal value of the module
                        
                      required:
                        - port
                        - sim
                        - seq
                        - st
                        - imei
                        - active
                        - inserted
                        - slot_active
                        - led
                    description: Status of device port
                required:
                  - type
                  - mac
                  - ip
                  - status
                  - seq
                  - max-ports
                  - ver
                  - expires
              examples:
                '1':
                  summary: dev-status
                  value: 
                    type: dev-Status
                    seq: 1
                    expires: 180
                    mac: 00-30-f1-01-02-03
                    ip: 192.168.1.67
                    max-ports: 32
                    max-slots: 4
                    status: 
                      - port: 1.01
                        sim: ""
                        seq: 1
                        st: 7
                        imei: 86739075242xxxx
                        active: 1
                        inserted: 1
                        slot_active: 1
                        led: 0
                        iccid: 893510123241310xxxxx
                        imsi: 2680111006xxxxx
                        sn: ""
                        opr: 46000 CHINA MOBILE
                        bal: 0.00
                        sig: 5
          headers: {}
      security: []
  http://host:port/get_ports_status:
    get:
      summary: Get Port Status
      deprecated: false
      description: >-
        Immediately query detailed status information of the current port.
        
        
        If the request contains the `ports` field, use the `ports` field; if `slots` is absent but `ports_pattern` is present, use `ports_pattern`; if neither is provided, return an error.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
              example:
                ports_pattern: 1,2
              schema:
                type: object
                properties:
                  ports:
                    type: array
                    description: >-
                      Array of port numbers and slot numbers
                    items:
                      type: object
                      properties:
                        port:
                          type: number
                          description: Port number
                        slot:
                          type: number
                          description: Slot number
                  ports_pattern:
                    type: string
                    description: >- 
                      Port mode string, with the following values:

                       - `all` `*`: All ports
 
                       - `n`: Specify a single port, e.g., 2, which indicates port 2

                       - `x-y,z` : Specify multiple ports, with port numbers separated by commas. For consecutive ports, a hyphen can be used, e.g., 1-4,7 to indicate ports 1 to 4 and port 7
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    const: port-status
                    description: Message type
                  port:
                    type: string
                    description: >-
                      Describe the current working port and SIM slot. Like
                      1.01,1.02.....32.04
                  sim:
                    type: string
                    description: Simpool's identification
                  seq:
                    type: integer
                    description: The port is incremented from port 1
                  st:
                    type: string
                    description: >-
                      Port status code + detail
                                            
                       - 0 No SIM card
                       - 1 Exist idel SIM card
                       - 2 Registering
                       - 3 Registered
                       - 4 Call connected
                       - 5 Nobalance or alarm
                       - 6 Register failed
                       - 7 SIM card locked by device
                       - 8 SIM card locked by operator
                       - 9 Recognize SIM card error
                       - 11 Card Detected
                       - 12 User locked
                       - 13 Port inter-calling
                       - 14 Inter-calling holding
                       - 15 Access Mobile Network
                       - 16 Module Response timeout
                  bal:
                    type: number
                    description: SIM card  balance(yy.mm)
                  opr:
                    type: string
                    description: >-
                      SIM card operator name and ID valid while parameter `st`
                      equal to 3 or 4
                    nullable: true
                  sn:
                    type: string
                    description: SIM number
                  imei:
                    type: string
                    description: IMEI of module
                  active:
                    type: integer
                    description: >-
                      Current card
                       - 0 no
                       - 1 yes
                    enum:
                      - 0
                      - 1
                  imsi:
                    type: string
                    description: IMSI num of SIM card
                  iccid:
                    type: string
                    description: ICCID num of SIM card
                  inserted:
                    type: integer
                    description: >-
                      A card is inserted into a slot
                       - 1 yes
                       - 0 no
                    enum:
                      - 0
                      - 1
                  slot_active:
                    type: integer
                    description: >-
                      Whether the card slot is enabled
                       - 1 yes
                       - 0 no
                    enum:
                      - 0
                      - 1
                  sig:
                    type: integer
                    description: Signal value of the module
                    minimum: 0
                    maximum: 31
                  led:
                    type: integer
                    description: >-
                      Led is enabled or not
                       - 1 yes
                       - 0 no
                    enum:
                      - 0
                      - 1
                required:
                  - type
                  - port
                  - bal
                  - st
              examples:
                '1':
                  summary: port-status
                  value:
                    - type: port-status
                      port: 1.01
                      sim: ''
                      seq: 8
                      st: '3'
                      bal: 100
                      opr: 46001 CHINA UNICOM GSM
                      sn: ''
                      imei: '8986105994xxxxx'
                      active: 1
                      imsi: '4600149782xxxxx'
                      iccid: '898601162899100xxxxx'
                      inserted: 1
                      slot_active: 1
                      sig: 29
                      led: 1
                    - port: 2.01
                      sim: ""
                      seq: 2
                      st: 3
                      imei: 89739216xxxxx
                      active: 1
                      inserted: 1
                      slot_active: 1
                      led: 0
                      iccid: 89103000000981xxxxx
                      imsi: 5250530906xxxxx
                      sn: ""
                      opr: 46000 CHINA MOBILE
                      bal: 0.00
                      sig: 21
          headers: {}
      security: []
  http://host:port/save_config:
    post:
      summary: Save Config
      deprecated: false
      description: >-
        Save the current device configuration.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
  http://host:port/reboot_device:
    post:
      summary: Reboot Dev
      deprecated: false
      description: >-
        Immediately reboot the device.
      tags: 
        - Device Action Commands
      parameters:
        - name: username
          in: query
          description: Device Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Device Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          headers: {}
      security: []
{
  "openapi": "3.0.1",
  "info": {
    "title": "Ejoin Gateway HTTP API",
    "description": "Welcome to Ejoin Gateway HTTP API documentation. Here you will find details\nto learn about, try, and implement Ejoin Gateway HTTP API.\n\nThe Ejoin Gateway HTTP APIv2.4.0 is available in SMSEagle software version\n5.0 and higher.\n\n# SDKs\nSMSEagle API is built on OpenAPI 3.0 Specification. You may download the API specification using **Download** button at the top of the page. The specification file can be used to generate SDK in your preffered programming language using open source tools like [OpenAPI Generator](https://openapi-generator.tech/) or  [Swagger Codegen](https://swagger.io/tools/swagger-codegen/).\n\n# Examples\nFor each API endpoint, we provide basic use case examples. Each example has sample payload parameters in JSON format showing how to complete a task (for example send SMS, create Phonebook contact, Get modem signal strength, etc.). Each example is accompanied with API response sample.\n\n# Webhooks\nIf you want to be notified about certain events like incoming message or change of delivery status, use webhooks. Webhooks are standard HTTP endpoints implemented in your application that will accept HTTP requests from SMSEagle device. Webhooks save you from having to continuously send requests to the SMSEagle device asking for message status. Webhooks can be configured via feature named **Callback URL** (Web-GUI > menu CallbackURL).\n",
    "version": "2.4.1",
    "x-logo": {
      "url": "./logotyp-ejoin.png",
      "backgroundColor": "#FAFAFA",
      "altText": "SMS logo"
    }
  },
  "tags": [
    {
      "name": "SMS Sending"
    },
    {
      "name": "ESIM"
    },
    {
      "name": "Receive the SMS"
    },
    {
      "name": "Query SMS"
    },
    {
      "name": "Status Notification"
    },
    {
      "name": "Query SMS statistics"
    },
    {
      "name": "Query call statistics"
    },
    {
      "name": "Operate command sending"
    },
    {
      "name": "MMS receiving"
    },
    {
      "name": "Modify IMEI parameters "
    },
    {
      "name": "Add SIM Card Numbers"
    },
    {
      "name": "AT Command"
    },
    {
      "name": "USSD API"
    }
  ],
  "paths": {
    "/goip_post_sms.html": {
      "post": {
        "summary": "SMS Sending",
        "deprecated": false,
        "description": "Message description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.\nTips:\n1. While not choose a port, device will pick up a random port to send SMS to every recipient.\n2. While chose more than one ports, and just one SMS recipient , then device will use all chose port to\nsend SMS to this recipient.\n3. If more ports, and more recipient designed, then every port will send SMS to every recipient\nseparately.",
        "tags": [
          "SMS Sending",
          "SMS Sending"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": false,
            "example": "",
            "schema": {
              "type": "string",
              "examples": [
                "1.0：Compatible with previous API",
                "1.1: Support for the description of  this document"
              ],
              "default": "1.0"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "{\n    \"type\": \"send-sms\",\n    \"task_num\": 1,\n    \"tasks\": [\n        {\n            \"dr\": 1,\n            \"tid\": 156,\n            \"to_all\": 30,\n            \"to\": \"10086\",\n            \"sms\": \"101\"\n        }\n    ]\n}"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reason": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "send-sms"
                    },
                    "status": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "status"
                        ]
                      }
                    },
                    "task_num": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tid": {
                            "type": "integer",
                            "description": "Task ID"
                          },
                          "status": {
                            "type": "integer",
                            "description": "Task status code\n0：OK\n1：Invalid User\n2：Invalid Port\n3：USSD Expected\n4：Pending USSD\n5：SIM Unregistered\n6：Timeout\n7：Server Error\n8：SMS expected\n9：TO expected\n10：Pending Transaction\n11：TID Expected\n12：FROM Expected\n13：Duplicated TaskId\n14：Unauthorized\n15：Invalid CMD\n16：Too Many Task\n17：MMS Title expected\n18：Too Many MMS Attachments\n19：MMS Attachments expected\nIf task status ID not equal to 0, then means this task not received by device",
                            "minimum": 0,
                            "maximum": 20,
                            "examples": [
                              0,
                              1,
                              20
                            ]
                          }
                        },
                        "required": [
                          "tid",
                          "status"
                        ]
                      }
                    }
                  },
                  "required": [
                    "reason",
                    "type",
                    "status",
                    "task_num"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": {
                      "type": "send-sms",
                      "task_num": 1,
                      "tasks": [
                        {
                          "tid": "tid_1"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "object",
                      "properties": {
                        "recipients": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "recipients"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception Example",
                    "value": {
                      "message": {
                        "recipients": "One of parameters: to, contacts, groups is required."
                      }
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Invalid API key."
                    }
                  },
                  "required": [
                    "message"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception Example",
                    "value": {
                      "message": "Invalid API key."
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_pause_sms.html": {
      "post": {
        "summary": "Pause the SMS task",
        "deprecated": false,
        "description": "When a SMS task is still waiting to be sent in the send queue, one or more SMS can be paused.\nMessage description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "SMS Sending"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version\nThis document describes specification support only",
            "required": false,
            "example": "1.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "",
            "required": true,
            "example": "Device username",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "",
            "required": true,
            "example": "Device password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "{\n    \"tids\": [tid1,tid2,…,tidn\n    ]\n}"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "examples": [
                        200
                      ],
                      "description": "Interface processing result code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing results ",
                      "examples": [
                        "OK"
                      ]
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tid": {
                            "type": "string",
                            "description": "Task ID"
                          },
                          "status": {
                            "type": "string",
                            "description": "Task status code",
                            "enum": [
                              "0 OK",
                              "1 Invalid User",
                              "2 Invalid Port",
                              "3 USSD Expected",
                              "4 Pending USSD",
                              "5 SIM Unregistered",
                              "6 TImeout",
                              "7 Server Error",
                              "8 SMS expected",
                              "9 TO expected",
                              "10 Pending Transaction",
                              "11 TID Expected",
                              "12 From Expected"
                            ]
                          }
                        },
                        "required": [
                          "status",
                          "tid"
                        ]
                      },
                      "description": "Task processing results.\nWhen there is no tids in the request, this field is not included in the result."
                    }
                  },
                  "required": [
                    "reason",
                    "code"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"results\": [\r\n        {\r\n            \"tid\": \"1\",\r\n            \"status\": \"0 OK\"\r\n        },\r\n        {\r\n            \"tid\": \"2\",\r\n            \"status\": \"9 TO expected\"\r\n        },\r\n        {\r\n            \"tid\": \"3\",\r\n            \"status\": \"3 USSD Expected\"\r\n        },\r\n        ...\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_resume_sms.html": {
      "post": {
        "summary": "Resume the paused SMS task",
        "deprecated": false,
        "description": "Resume the sending of one or more suspended SMS tasks. \nMessage description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "SMS Sending"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version\nThis document describes \nspecification support only",
            "required": false,
            "example": "1.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "{\n    \"tids\": [tid1,tid2,…,tidn\n    ]\n}"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Interface processing result code",
                      "examples": [
                        200
                      ]
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing results ",
                      "examples": [
                        "OK"
                      ]
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tid": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "status",
                          "tid"
                        ]
                      },
                      "description": "Task processing results.\nWhen there is no tids in the request, this field is not included in the result."
                    }
                  },
                  "required": [
                    "reason",
                    "code"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": {
                      "code": 200,
                      "reason": "OK",
                      "results": [
                        {
                          "tid": "1",
                          "status": "0 OK"
                        },
                        {
                          "tid": "2",
                          "status": "2 Invalid Port"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_remove_sms.html": {
      "post": {
        "summary": "Delete the SMS task",
        "deprecated": false,
        "description": "Delete one or more SMS tasks waiting to be sent in the send queue.\nMessage description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "SMS Sending"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version\nThis document describes specification support only",
            "required": false,
            "example": "1.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "{\n    \"tids\": [tid1,tid2,…,tidn\n    ]\n}"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Interface processing result code",
                      "examples": [
                        200
                      ]
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing results ",
                      "examples": [
                        "OK"
                      ]
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tid": {
                            "type": "string",
                            "description": "Task ID"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status code and reason description of \nthe task",
                            "enum": [
                              "0 OK",
                              "1 Invalid User",
                              "2 Invalid Port",
                              "3 USSD Expected",
                              "4 Pending USSD",
                              "5 SIM Unregistered",
                              "6 Timeout",
                              "7 Server Error",
                              "8 SMS expected",
                              "9 TO expected",
                              "10 Pending Transaction",
                              "11 TID Expected",
                              "12 From Expected"
                            ]
                          }
                        },
                        "required": [
                          "status",
                          "tid"
                        ]
                      },
                      "description": "Task processing results .\nIf there is no TIDS in the request, this field is not included in the result"
                    }
                  },
                  "required": [
                    "reason",
                    "results",
                    "code"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"results\": [\r\n        {\r\n            \"tid\": \"1\",\r\n            \"status\": \"0 OK\"\r\n        },\r\n        {\r\n            \"tid\": \"2\",\r\n            \"status\": \"3 USSD Expected\"\r\n        },\r\n        ...\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_get_tasks.html": {
      "get": {
        "summary": "Query the SMS task",
        "deprecated": false,
        "description": "Query the SMS task waiting to be sent in the send queue. \nMessage description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "SMS Sending"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API Version\nThis document describes \nspecification support only",
            "required": false,
            "example": "1.1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Send port. Starting from 1",
            "required": true,
            "schema": {
              "type": "integer",
              "examples": [
                1,
                32,
                64
              ]
            }
          },
          {
            "name": "has_content",
            "in": "query",
            "description": "Whether to bring a text message in the result",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "The starting position of the request. \n0 represents the \nbeginning of the first task",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "num",
            "in": "query",
            "description": "The number of \nRequest messages",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tids": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tid": {
                          "type": "integer",
                          "description": "Task ID"
                        }
                      },
                      "required": [
                        "tid"
                      ]
                    },
                    "description": "The task ID to be query."
                  }
                },
                "required": [
                  "tids"
                ]
              },
              "example": "{\n    \"tids\": [tid1,tid2,…,tidn\n    ]\n}"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "examples": [
                        200
                      ],
                      "description": "Interface processing result code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing results ",
                      "examples": [
                        "OK"
                      ]
                    },
                    "total_num": {
                      "type": "integer",
                      "description": "The number of tasks"
                    },
                    "task_num": {
                      "type": "integer",
                      "description": "Query the number of tasks returned"
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tid": {
                            "type": "integer",
                            "description": "Task id"
                          },
                          "from": {
                            "type": "string",
                            "description": "One or more (commas, short horizontal \nconnections) send ports (from 1)",
                            "default": "Device selection"
                          },
                          "to": {
                            "type": "string",
                            "description": "One or more (comma connected) message \nreceiver number."
                          },
                          "sms": {
                            "type": "string",
                            "description": "Message content"
                          },
                          "chs": {
                            "type": "string",
                            "description": "Code set（utf8|base64）",
                            "default": "Utf-8"
                          },
                          "coding": {
                            "type": "integer",
                            "description": "Specifies the encoding of the message sent. ",
                            "default": 0,
                            "enum": [
                              "0 Do not specify",
                              "1 USC2",
                              "2 7bit"
                            ]
                          },
                          "state": {
                            "type": "integer",
                            "description": "Task status",
                            "enum": [
                              "0 normal",
                              "1 suspended"
                            ]
                          }
                        },
                        "required": [
                          "tid",
                          "to",
                          "state"
                        ]
                      },
                      "description": "Query the returned array of tasks"
                    }
                  },
                  "required": [
                    "reason",
                    "tasks",
                    "total_num",
                    "task_num",
                    "code"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"total_num\": 5,\r\n    \"task_num\": 2,\r\n    \"tasks\": [\r\n        {\r\n            \"tid\": 1,\r\n            \"from\": \"\",\r\n            \"to\": \"\",\r\n            \"sms\": \"hello123\",\r\n            \"chs\": \"utf-8\",\r\n            \"coding\": 0,\r\n            \"state\": 1\r\n        },\r\n        ...\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/Server or device configuration decision": {
      "post": {
        "summary": "Sending status report",
        "deprecated": false,
        "description": "While SMS send successfully/failed/timeout, device will put the result in cache, after meet condition(cache storage full or cache time reached ),device will send POST request to report one or more task execute result. If it is group sending, device will report execute result periodically until all num in this group sending task get a result. \nTips： \n1.tid related to the task ID in the send-sms message. \n2.sending, sent, failed are accumulated num in one task. \n3.Sdr(successfully send record) list records between 2 status-report, server should keep before details. \n4.fdr(failed detail record) list records between 2 status-report, server should keep before details.",
        "tags": [
          "SMS Sending"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version\nThis document describes specification support only",
            "required": false,
            "example": "1.1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "status-report",
                      "description": "Message type"
                    },
                    "rpt_rum": {
                      "type": "string",
                      "description": "Report num",
                      "default": "1",
                      "examples": [
                        "1"
                      ]
                    },
                    "rpts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tid": {
                            "type": "integer",
                            "description": "Related task ID"
                          },
                          "sending": {
                            "type": "integer",
                            "description": "Total num of SMS in sending"
                          },
                          "sent": {
                            "type": "integer",
                            "description": "Total num of SMS successfully send"
                          },
                          "failed": {
                            "type": "integer",
                            "description": "Total num of SMS failed send"
                          },
                          "unsent": {
                            "type": "integer",
                            "description": "Total SMS in cache waiting for send "
                          },
                          "sdr": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {},
                              "description": "Success report is a array, \n[0]: recipients num index(based on \ngroup sending),int \n[1]: num, string \n[2]: SMS sending port(1.01,2.02,...), \nstring \n[3]: SMS send timestamp in UTC time, int"
                            },
                            "description": "Successfully send details(one list for \none num)"
                          },
                          "fdr": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {},
                              "description": "[0]: recipients num index(based on \ngroup sending),int \n[1]: num, string \n[2]: SMS sending port(1.01,2.02,...), \nstring \n[3]: SMS send timestamp in UTC time.int\n[4]: Progress reason, code+details[refer to 1.0 API] \n[5]: Carrier reason, code+ description. Valid when [4] is failed to send"
                            },
                            "description": "Fail send details(one num one list)"
                          }
                        },
                        "required": [
                          "tid",
                          "sending",
                          "sent",
                          "failed",
                          "unsent",
                          "sdr",
                          "fdr"
                        ]
                      },
                      "description": "Detail status report"
                    }
                  },
                  "required": [
                    "type",
                    "rpt_rum",
                    "rpts"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": "{\r\n    \"type\": \"status-report\",\r\n    \"rpt_rum\": \"1\",\r\n    \"rpts\": [\r\n        {\r\n            \"tid\": 1,\r\n            ...\r\n        },\r\n        {\r\n            \"tid\": 2,\r\n            ...\r\n        },\r\n        ...\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_get_esims.html": {
      "get": {
        "summary": "Query ESIM",
        "deprecated": false,
        "description": "The write and delete operations for ESIM cannot be completed immediately, so when a successful HTTP request is submitted, the status field returned is 1, indicating that the task has been submitted but the operation has not been performed yet. To know the result of the previously submitted operation, it is necessary to use the query ESIM interface regularly to obtain various ESIM information and judge the value of the status field.\nMessage description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "ESIM",
          "ESIM"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version  \n1.0: Compatible with\nprevious API\n1.1: Support for the description of this document",
            "required": false,
            "example": "",
            "schema": {
              "type": "string",
              "examples": [
                "1.0: Compatible with previous API ",
                "1.1: Support for the description of this document"
              ],
              "default": "1.0"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device Username",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ports",
            "in": "query",
            "description": "The specified port number (valued\nfrom 1)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string",
              "default": "all",
              "examples": [
                "all: all ports",
                "2: Specify a single port",
                "1-2, 4: Port numbers separated by short numbers, specifying multiple ports, where \"-\" indicates a continuous port numbe"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Interface processing result code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing result reason"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of statistical results"
                    },
                    "ports": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "integer",
                            "description": "Port number (value from 1)eUICC ID"
                          },
                          "eid": {
                            "type": "string",
                            "description": "eUICC ID"
                          },
                          "esim_state": {
                            "type": "string",
                            "description": "If or not the eid is obtained correctly",
                            "examples": [
                              "0 - no",
                              "1 - yes"
                            ],
                            "enum": [
                              "0",
                              "1"
                            ]
                          },
                          "profiles": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "slot": {
                                  "type": "integer",
                                  "description": "Slot number (value from 1)"
                                },
                                "enabled": {
                                  "type": "integer",
                                  "description": "If or not the current profile is enabled",
                                  "enum": [
                                    0,
                                    1
                                  ]
                                },
                                "iccid": {
                                  "type": "string",
                                  "description": "ESIM corresponding iccid"
                                },
                                "ac": {
                                  "type": "string",
                                  "description": "Activation code"
                                },
                                "cc": {
                                  "type": "string",
                                  "description": "Confirmation code"
                                },
                                "provider": {
                                  "type": "string",
                                  "description": "Name of service provide"
                                },
                                "exust": {
                                  "type": "integer",
                                  "description": "If or not the current slot has been written into the profile",
                                  "enum": [
                                    0,
                                    1
                                  ]
                                },
                                "op": {
                                  "type": "integer",
                                  "description": "Profile operation of the current slot",
                                  "enum": [
                                    0,
                                    1,
                                    2
                                  ]
                                },
                                "status": {
                                  "type": "integer",
                                  "description": "The current esim profile operation status",
                                  "enum": [
                                    0,
                                    1,
                                    2,
                                    3
                                  ]
                                },
                                "reason": {
                                  "type": "string",
                                  "description": "Causes of operational errors"
                                }
                              },
                              "required": [
                                "slot",
                                "enabled",
                                "iccid",
                                "ac",
                                "cc",
                                "provider",
                                "exust",
                                "op",
                                "reason",
                                "01JKF8VV7JBRWYHHFD7G54PRSV",
                                "status"
                              ],
                              "description": "ESIM information array item description"
                            },
                            "description": "The array of ESIM information for this port, with each ESIM information as follows"
                          }
                        },
                        "required": [
                          "port",
                          "eid",
                          "esim_state",
                          "profiles"
                        ],
                        "description": "Description of the query result item"
                      },
                      "description": "An array of query results. Each result item in the array is as follows"
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "count",
                    "ports"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": {
                      "code": 200,
                      "reason": "OK",
                      "count": 1,
                      "ports": [
                        {
                          "port": 5
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_write_esims.html": {
      "post": {
        "summary": "Write ESIM",
        "deprecated": false,
        "description": "The write operations for ESIM  cannot be completed immediately.\nMessage description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "ESIM"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": true,
            "schema": {
              "type": "string",
              "default": "1.0",
              "examples": [
                "1.0: Compatible with previous API",
                "1.1: Support for the description of this document"
              ]
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "port": {
                    "type": "integer",
                    "description": "Port number (value from 1)"
                  },
                  "slot": {
                    "type": "integer",
                    "description": "Slot number (value from 1)"
                  },
                  "ac": {
                    "type": "string",
                    "description": "Activation code"
                  },
                  "cc": {
                    "type": "string",
                    "description": "Confirmation code"
                  }
                },
                "required": [
                  "port",
                  "slot",
                  "ac",
                  "cc"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Interface processing result code",
                      "examples": [
                        200
                      ]
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing result reason",
                      "examples": [
                        "OK"
                      ]
                    },
                    "ports": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "integer",
                            "description": "Port number (value from 1)",
                            "examples": [
                              1,
                              32,
                              64
                            ]
                          },
                          "slot": {
                            "type": "integer",
                            "description": "slot number (value from 1)",
                            "examples": [
                              1,
                              32,
                              64
                            ]
                          },
                          "status": {
                            "type": "integer",
                            "description": "The current esim profile submission write operation status,"
                          }
                        },
                        "required": [
                          "port",
                          "slot",
                          "status"
                        ],
                        "description": "Description of the query result item"
                      },
                      "description": "An array of query results"
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "ports"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"ports\": [\r\n        {\r\n            \"port\": 1,\r\n             ...\r\n        },\r\n        ...\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_delete_esims.html": {
      "post": {
        "summary": "Delete ESIM",
        "deprecated": false,
        "description": "The delete operations for ESIM cannot be completed immediately.\nMessage description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "ESIM"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1.0",
              "examples": [
                "1.0: Compatible with previous API",
                "1.1: Support for the description of this document"
              ]
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "port": {
                    "type": "integer",
                    "description": "port number (value from 1)",
                    "examples": [
                      1,
                      32,
                      64
                    ]
                  },
                  "slot": {
                    "type": "integer",
                    "description": "slot number (value from 1)",
                    "examples": [
                      1,
                      32,
                      64
                    ]
                  }
                },
                "required": [
                  "port",
                  "slot"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "examples": [
                        200
                      ]
                    },
                    "reason": {
                      "type": "string",
                      "examples": [
                        "OK"
                      ]
                    },
                    "ports": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "integer"
                          },
                          "slot": {
                            "type": "integer"
                          },
                          "status": {
                            "type": "integer",
                            "enum": [
                              1,
                              2,
                              3
                            ]
                          }
                        },
                        "required": [
                          "port",
                          "slot",
                          "status"
                        ]
                      }
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "ports"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"ports\": [\r\n        {\r\n            \"port\": 1,\r\n            \"slot\": 1,\r\n            \"status\": 1\r\n        },\r\n        ...\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/": {
      "get": {
        "summary": "Receive the SMS",
        "deprecated": false,
        "description": "1.Device will send SMS to server by POST request, while it get SMS from operator. \n2.While forwarding SMS, device send a request to server first, so even device in LAN, and server in a public net, it also can work effectively\n3.URL：Default set by device，server can revise it in SMS sending quest message.",
        "tags": [
          "Receive the SMS"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": false,
            "example": "1.1",
            "schema": {
              "type": "string",
              "default": "1.1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Data type"
                    },
                    "sms_num": {
                      "type": "string",
                      "description": "Total SMS num"
                    },
                    "sms": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "For saving the bandwidth, SMS content also storage in a array. \n[0]: Delivery report flag,0:normal SMS, 1:This is a delivery report \n[1]: Receive report(‘1.01’,’1.02’) \n[2]: timestamp while device got this SMS \n[3]: Sender(If Delivery report flag set to 1, then sender should be SMCC) \n[4]: Recipient(If Delivery report flag set to 1,then recipient should be the \noriginal recipient. ) \n[5]: SMS content： \nDelivery report: \"code scts\", code is 0 for successful delivery, utf-8 \nOrdinary SMS: BASE64 encoding of utf-8 "
                    }
                  },
                  "required": [
                    "sms",
                    "type",
                    "sms_num"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": "{\r\n    \"type\": \"recv-sms\",\r\n    \"sms_num\":n,\r\n    \"sms\": [\r\n        [],\r\n    …,\r\n        []\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_get_sms.html": {
      "get": {
        "summary": "Query SMS",
        "deprecated": false,
        "description": "1.Customers can actively query the SMS received by the device through HTTP GET/POST request.\n2.Query process：\n1).Query all messages received by the device without the query parameters (except for user-verified parameters). \n2).Use the value of next_sms returned by the device as the value of the sms_id parameter to query subsequent SMS messages. \n3).If the device restarts, return a different ssrc synchronization source ID and return to step 1. \n4).Repeat step 2\n3.Message description :\nhost: Device IP address \nport: Device webpage management port, default value is 80.",
        "tags": [
          "Query SMS"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Device Username",
            "required": true,
            "example": "root",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device  Password",
            "required": true,
            "example": "root",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sms_id",
            "in": "query",
            "description": "Start SMS ID",
            "required": false,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sms_num",
            "in": "query",
            "description": "Specify the number of SMS to be queried ",
            "required": false,
            "example": "0：Query all SMS",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sms_del",
            "in": "query",
            "description": "Delete the SMS that has been returned by the query",
            "required": false,
            "example": "0：Do not delete， 1：delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Operation code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Reason description"
                    },
                    "ssrc": {
                      "type": "string",
                      "description": "Synchronization source identifier The device generates a new ssrc each time it runs.So the value changes, re-query"
                    },
                    "sms_num": {
                      "type": "integer",
                      "description": "Number of SMS queried"
                    },
                    "next_sms": {
                      "type": "integer",
                      "description": "The next SMS ID"
                    },
                    "data": {
                      "type": "integer",
                      "description": "Queryed SMS content\nFor saving the bandwidth, SMS content also storage in a array. [0]: Delivery report flag,0:normal SMS, 1:This is a delivery report [1]: Receive report(‘1.01’,’1.02’)\n[2]: timestamp while device got this SMS\n[3]: Sender(If Delivery report flag set to 1, then sender should be SMCC)\n[4]: Recipient(If Delivery report flag set to 1,then recipient should be the original recipient. )\n[5]: SMS content：\nDelivery report: \"code scts\", code is 0 for successful delivery, utf-8 Ordinary SMS: BASE64 encoding of utf-8"
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "ssrc",
                    "sms_num",
                    "next_sms",
                    "data"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Data",
                    "value": "{\r\n  \"code\": 0,\r\n  \"reason\": \"OK\",\r\n  \"ssrc\": \"0123456789abcdef\",\r\n  \"sms_num\": 2,\r\n  \"next_sms\": 3,\r\n  \"data\": [\r\n    [\r\n      0,\r\n      \"1B\",\r\n      1466506477,\r\n      \"10010\",\r\n      \"13265825775\",\r\n      \"5bCK5pWs55qE55So5oi377yM5oKo5aW977yB5o6o6I2Q5oKo5L2/55So44CQ5omL5py66JCl5Lia5Y6F44CR5LiA56uZ5byP5YWN5rWB6YeP5pyN5Yqh5bmz5Y+wIGh0dHA6Ly91LjEwMDEwLmNuL2R0Y2Qg77yM6L275p2+5p+l6K+i6K+d6LS544CB5L2Z6aKd5Y+K6K+m5Y2V77yb5oiW5Zue5aSN5Lul5LiL5pWw5a2X5Luj56CB6I635Y+W5oKo6ZyA6KaB55qE5pyN5Yqh77yaDQoxMDEu5b2T5pyI6K+d6LS577ybDQoxMDIu5Y+v55So5L2Z6aKd77ybDQowLuWNh+e6pzRH77ybDQoxLuivnei0ueWPiuenr+WIhu+8mw0KMi7otKbmiLfmn6Xor6LvvJsNCjMu5YWF5YC877ybDQo0LuWuouaIt+acjeWKoe+8mw0KNS7kuJrliqHlip7nkIbvvJsNCjYu5aKe5YC85Lia5Yqh77ybDQo3LuecgeS7veS4k+WMuu+8mw0KOS7ng63ngrnkv4PplIDjgIINCuW5v+S4nOiBlOmAmuOAggAAAAA=\"\r\n    ],\r\n    [\r\n      0\r\n     \"1B\",\r\n      1466506670,\r\n      \"10010\",\r\n      \"13265825775\",\r\n      \"5bCK5pWs55qE55So5oi377yM5oKo5aW977yB5o6o6I2Q5oKo5L2/55So44CQ5omL5py66JCl5Lia5Y6F44CR5LiA56uZ5byP5YWN5rWB6YeP5pyN5Yqh5bmz5Y+wIGh0dHA6Ly91LjEwMDEwLmNuL2R0Y2Qg77yM6L275p2+5p+l6K+i6K+d6LS544CB5L2Z6aKd5Y+K6K+m5Y2V77yb5oiW5Zue5aSN5Lul5LiL5pWw5a2X5Luj56CB6I635Y+W5oKo6ZyA6KaB55qE5pyN5Yqh77yaDQoxMDEu5b2T5pyI6K+d6LS577ybDQoxMDIu5Y+v55So5L2Z6aKd77ybDQowLuWNh+e6pzRH77ybDQoxLuivnei0ueWPiuenr+WIhu+8mw0KMi7otKbmiLfmn6Xor6LvvJsNCjMu5YWF5YC877ybDQo0LuWuouaIt+acjeWKoe+8mw0KNS7kuJrliqHlip7nkIbvvJsNCjYu5aKe5YC85Lia5Yqh77ybDQo3LuecgeS7veS4k+WMuu+8mw0KOS7ng63ngrnkv4PplIDjgIINCuW5v+S4nOiBlOmAmuOAggAAAAA=\"\r\n    ]\r\n  ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_get_status.html": {
      "get": {
        "summary": "Status Notification",
        "deprecated": false,
        "description": "1.This device will send a HTTP POST request which include the device running status information to the SMS server when it reaches either of below conditions.\na.One of device port status changed.\nb.Community period expired.\n2.Message description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "Status Notification"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Specific the report URL\nTips:\nSpecial characters need do URL encode\nJust need specific once time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Report period\n>0:Report status according to the specified report period,the minimum value is 60,the unit is second \n0:cancel status report",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 60
            }
          },
          {
            "name": "all_sims",
            "in": "query",
            "description": "Get all the card status",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "all_slots",
            "in": "query",
            "description": "Get the status of all card slots",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "dev-status",
                      "description": "Message type"
                    },
                    "seq": {
                      "type": "integer",
                      "description": "Device status message sequence number, start from 1"
                    },
                    "expires": {
                      "type": "integer",
                      "default": 180,
                      "description": "Dev-status sending period"
                    },
                    "mac": {
                      "type": "string",
                      "description": "Device MAC"
                    },
                    "ip": {
                      "type": "string",
                      "description": "Device IP address"
                    },
                    "max-ports": {
                      "type": "integer",
                      "description": "Total ports of dev"
                    },
                    "max-slots": {
                      "type": "string",
                      "default": "1",
                      "description": "Total SIM slots of deviceice"
                    },
                    "status": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "port"
                        ]
                      },
                      "description": "Status of device port"
                    }
                  },
                  "required": [
                    "type",
                    "mac",
                    "ip",
                    "status",
                    "seq",
                    "max-ports"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "dev-status",
                    "value": "{\r\n    \"type\": \"dev-status\",\r\n    \"seq\": 1,\r\n    \"expires\": 180,\r\n    \"mac\": \"00-30-f1-01-02-03\",\r\n    \"ip\": \"192.168.1.67\",\r\n    \"max-ports\": 32,\r\n    \"max-slots\": \"4\",\r\n    \"status\": [\r\n        {\r\n            \"port\": \"1A\"\r\n            ...\r\n        },\r\n        {\r\n            \"port\": \"2A\"\r\n            ...\r\n        },\r\n        {\r\n            \"port\": \"3A\"\r\n            ...\r\n        },\r\n        ...\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          },
          "x-200:port-status": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "port-status",
                      "description": "Message type"
                    },
                    "port": {
                      "type": "string",
                      "description": "Describe the current working port and SIM slot. Like 1.01,1.02.....32.04"
                    },
                    "sim": {
                      "type": "string",
                      "description": "Simpool’s identification"
                    },
                    "seq": {
                      "type": "integer",
                      "description": "The port is incremented from port 1"
                    },
                    "st": {
                      "type": "string",
                      "description": "Port status code + detail ",
                      "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "11",
                        "12",
                        "13",
                        "14",
                        "15",
                        "16"
                      ]
                    },
                    "bal": {
                      "type": "number",
                      "description": "SIM card  balance(yy.mm)"
                    },
                    "opr": {
                      "type": "string",
                      "description": "SIM card operator name and ID valid while parameter “st” equal to 3 or 4",
                      "nullable": true
                    },
                    "sn": {
                      "type": "string",
                      "description": "SIM number"
                    },
                    "imei": {
                      "type": "string",
                      "description": "IMEI of module"
                    },
                    "active": {
                      "type": "integer",
                      "description": "Current card",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "imsi": {
                      "type": "string",
                      "description": "IMSI num of SIM card"
                    },
                    "iccid": {
                      "type": "string",
                      "description": "ICCID num of SIM card"
                    },
                    "inserted": {
                      "type": "integer",
                      "description": "A card is inserted into a slot",
                      "enum": [
                        1,
                        0
                      ]
                    },
                    "slot_active": {
                      "type": "integer",
                      "description": "Whether the card slot is enabled",
                      "enum": [
                        0,
                        1
                      ]
                    },
                    "sig": {
                      "type": "integer",
                      "description": "Signal value of the module",
                      "minimum": 0,
                      "maximum": 31
                    },
                    "led": {
                      "type": "integer",
                      "description": "Led is enabled or not",
                      "enum": [
                        0,
                        1
                      ]
                    }
                  },
                  "required": [
                    "type",
                    "port",
                    "bal",
                    "st"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "port-status",
                    "value": {
                      "type": "port-status",
                      "port": "2B",
                      "sim": "",
                      "seq": 8,
                      "st": "3",
                      "bal": 100,
                      "opr": "46001 CHINA UNICOM GSM",
                      "sn": "",
                      "imei": "898610599441327",
                      "active": 1,
                      "imsi": "460014978212473",
                      "iccid": "89860116289910033431",
                      "inserted": 1,
                      "slot_active": 1,
                      "sig": 29,
                      "led": 1
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_get_sms_stat.html": {
      "get": {
        "summary": "Query SMS statistics",
        "deprecated": false,
        "description": "1.The client can actively query the short message statistics of the device through the HTTP GET request.\n2.host: Device IP address\n   port: Device webpage management port, default value is 80.",
        "tags": [
          "Query SMS statistics"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": false,
            "example": "1.0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device Username",
            "required": true,
            "example": "xxx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device Password",
            "required": true,
            "example": "xxx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ports",
            "in": "query",
            "description": "The specified port number (valued from 1). The values are as follows:\n1)all: all ports;\n2)Specify a single port;\n1-2, 4: Port numbers separated by short numbers, specifying multiple ports, where \"-\" indicates a continuous port number;",
            "required": false,
            "example": "all",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slots",
            "in": "query",
            "description": "The specified card slot number (value from 1). The values are as follows:\n1).Do not specify: current card\n2)all: all card slots;\n3)2: Specify a single card slot;\n1-2, 4: A card slot number separated by a short number, specifying a plurality of card slots, where \"-\" indicates a continuous card slot number;",
            "required": false,
            "example": "Current card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Statistic type. The values are as follows:\n1)0: The last hour;\n2)1: The last two hours;\n3)2: today;\n3: cumulative;",
            "required": false,
            "example": "0",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1",
                "2",
                "3"
              ],
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Interface processing result code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing result reason"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of statistical results"
                    },
                    "stats": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of statistical results (stat\nresults are as follows)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number (value from 1)"
                    },
                    "slot": {
                      "type": "integer",
                      "description": "Slot number (value from 1)"
                    },
                    "received": {
                      "type": "integer",
                      "description": "Number of SMS received"
                    },
                    "sent": {
                      "type": "integer",
                      "description": "Number of SMS sent"
                    },
                    "sent_ok": {
                      "type": "integer",
                      "description": "Number of successful SMS sent"
                    },
                    "sent_failed": {
                      "type": "integer",
                      "description": "Number of failed SMS sent"
                    },
                    "con_failed": {
                      "type": "integer",
                      "description": "Number of consecutive failed SMS"
                    },
                    "unsent": {
                      "type": "integer",
                      "description": "Number of unsent SMS"
                    },
                    "sending": {
                      "type": "integer",
                      "description": "Number of SMS being sent"
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "count",
                    "stats",
                    "port",
                    "slot",
                    "received",
                    "sent",
                    "sent_ok",
                    "sent_failed",
                    "con_failed",
                    "unsent",
                    "sending"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Response",
                    "value": "{\r\n    \"code\": 200,\r\n    \"reason\": \"OK\",\r\n    \"count\":n,\r\n    \"stats\": [\r\n        {\r\n            \"port\":xxx,…\r\n        },…\r\n    ]\r\n}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_get_call_stat.html": {
      "get": {
        "summary": "Query call statistics",
        "deprecated": false,
        "description": "1.The client can actively query the call statistics of the device through the HTTP GET request.\n2.Message description :\nhost: Device IP address\nport: Device webpage management port, default value is 80.",
        "tags": [
          "Query call statistics"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "API version",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1.0",
              "examples": [
                "1.0: Compatible with previous API",
                "1.1: Support for the description of this documen"
              ]
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Device username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ports",
            "in": "query",
            "description": "The specified port number (valued from 1)",
            "required": false,
            "schema": {
              "type": "string",
              "examples": [
                "all: all ports",
                "2: Specify a single port",
                "1-2, 4: Port numbers separated by short numbers, specifying multiple ports, where \"-\" indicates a continuous port number"
              ],
              "default": "all"
            }
          },
          {
            "name": "slots",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string",
              "default": "Current card",
              "examples": [
                "Do not specify: current card",
                "all: all card slots",
                "2: Specify a single card slot",
                "1-2, 4: A card slot number separated by a short number, specifying a plurality of card slots, where \"-\" indicates a continuous card slot number"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Interface processing result code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Interface processing result reason"
                    },
                    "count": {
                      "type": "integer",
                      "description": "Number of statistical results"
                    },
                    "stats": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "integer",
                            "description": "Port number (value from 1)"
                          },
                          "slot": {
                            "type": "integer",
                            "description": "Slot number (value from 1)"
                          },
                          "calls": {
                            "type": "integer",
                            "description": "Number of calling"
                          },
                          "alerted": {
                            "type": "integer",
                            "description": "Number of alerting"
                          },
                          "connected": {
                            "type": "integer",
                            "description": "Number of connected calls"
                          },
                          "con_failed": {
                            "type": "integer",
                            "description": "Number of failed calls"
                          },
                          "nc": {
                            "type": "string",
                            "description": "No Carriers success ratio (\"n/m\"), the numerator n is the success number, and the\ndenominator m is the total number"
                          },
                          "pdd": {
                            "type": "integer",
                            "description": "PDD"
                          },
                          "acd": {
                            "type": "integer",
                            "description": "ACD"
                          },
                          "asr": {
                            "type": "integer",
                            "description": "ASR percentage value"
                          },
                          "tcd": {
                            "type": "integer",
                            "description": "Cumulative call duration\n(minutes)"
                          },
                          "act_tcd": {
                            "type": "integer",
                            "description": "Actual cumulative call\nduration (seconds)"
                          }
                        },
                        "required": [
                          "port",
                          "slot",
                          "calls",
                          "alerted",
                          "connected",
                          "con_failed",
                          "nc",
                          "pdd",
                          "acd",
                          "asr",
                          "tcd",
                          "act_tcd"
                        ]
                      },
                      "description": "Array of statistical results "
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "stats"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": {
                      "code": 200,
                      "reason": "OK",
                      "stats": [
                        {
                          "port": 1,
                          "slot": 1,
                          "calls": 1,
                          "alerted": 1,
                          "connected": 1,
                          "con_failed": 0,
                          "nc": "0/0",
                          "pdd": 0,
                          "acd": 32,
                          "asr": 100,
                          "tcd": 1,
                          "act_tcd": 32
                        },
                        {
                          "port": 2,
                          "slot": 1,
                          "calls": 0,
                          "alerted": 0,
                          "connected": 0,
                          "con_failed": 0,
                          "nc": "0/0",
                          "pdd": 0,
                          "acd": 0,
                          "asr": 0,
                          "tcd": 0,
                          "act_tcd": 0
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_send_cmd.html": {
      "post": {
        "summary": "Add SIM Card Numbers",
        "deprecated": false,
        "description": "Reference： \ninformation in HTTP message Body is a text, many imei parameters modify use & to connect. \tsim_number(n)=xxxx，\nn = (port_number - 1) * slots_per_port + (slot_number - 1), xxx = sim_numbers parameter\nExample:\nsim_number(192)=1358021178&sim_number(196)=123456762221\n192 represents 25.01, where max-slot is 8, and the slot number for 01 is 1. \nSo, 25.01=(25 - 1)*8+(1-1) =192.\n196 represents 25.05, max-slot is 8, and the slot number for 05 is 5. \nSo, \t25.05=(25-1)*8+(5-1)=196.",
        "tags": [
          "Add SIM Card Numbers"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Device Username",
            "required": true,
            "example": "root",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device Password",
            "required": true,
            "example": "root",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "op",
            "in": "query",
            "description": "",
            "required": true,
            "example": "set",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "sim_number(n)=xxx&sim_number(n)=xxx"
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "par_set": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "1": {
                    "summary": "Successful Instance",
                    "value": {
                      "code": 0,
                      "reason": "OK",
                      "par_set": 2
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/In the 'SMS/MMS Settings' menu of the device, the 'MMS Inbox' page allows you to configure the push receiving server address": {
      "post": {
        "summary": "MMS receiving",
        "deprecated": false,
        "description": "At this stage, the main function is to push the received MMS content to the configured server address via HTTP.\nMMS content is pushed via HTTP POST. Please refer to the HTTP standard for details. Only special HTTP header fields are explained below (Note: header fields may not exist). In addition, header fields starting with 'Emms-' are custom fields, while others are standard HTTP fields:",
        "tags": [
          "MMS receiving"
        ],
        "parameters": [
          {
            "name": "Emms-Subject",
            "in": "header",
            "description": "MMS subject",
            "required": false,
            "example": "chatset=US-ASCII",
            "schema": {
              "type": "string",
              "examples": [
                "charset：Character set, such as UTF-8"
              ]
            }
          },
          {
            "name": "Emms-From",
            "in": "header",
            "description": "MMS sending address",
            "required": false,
            "example": "type=PLMN;chartset=utf-8",
            "schema": {
              "type": "string",
              "examples": [
                "charset: Character set, such as UTF-8",
                "type: Sender address type, usually a phone number, known as PLMN"
              ]
            }
          },
          {
            "name": "Emms-To",
            "in": "header",
            "description": "MMS receiving address",
            "required": false,
            "example": "type=PLMN;chartset=utf-8",
            "schema": {
              "type": "string",
              "examples": [
                "charset: Character set, such as UTF-8 ",
                "type: Sender address type, usually a phone number, known as PLMN"
              ]
            }
          },
          {
            "name": "Date",
            "in": "header",
            "description": "MMS sending time",
            "required": false,
            "example": "Thu,28 Mar 2024 09:47:10 GMT",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The specifics need to be decided according to the operator, but attention should be paid to the processing of multipart related types",
            "required": false,
            "example": "application/smil",
            "schema": {
              "type": "string",
              "examples": [
                "Related to specific types"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_send_at.html": {
      "get": {
        "summary": "AT Command",
        "deprecated": false,
        "description": "1.Application will send a HTTP GET request to the device, device will return HTTP 200 OK response to the application.\n2.Request URL\nhttp://host[:port]/goip_send_at.html\nhost: device IP address\nport: web port，default is 80，(Optiona)",
        "tags": [
          "AT Command"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Device Usuername ",
            "required": true,
            "example": "root",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device Password",
            "required": true,
            "example": "root",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Which port to send AT(begin with port 1)",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "AT command code",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "timeout(second)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "120"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Return code，0 means success",
                      "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5"
                      ]
                    },
                    "reason": {
                      "type": "string",
                      "description": "Reason describe"
                    },
                    "resp": {
                      "type": "string",
                      "description": "AT command response"
                    },
                    "max-port": {
                      "type": "string",
                      "description": "Specify the max port"
                    },
                    "port": {
                      "type": "string",
                      "description": "Means available port\nNotes： 1,3-6,8,10 means port 1，3，4，5，6，8，10 available"
                    }
                  }
                },
                "examples": {
                  "1": {
                    "summary": "Successful instance",
                    "value": "Example:\nhttp://192.168.1.67/goip_send_at.html?username=root&password=root&port=5&at=ati\n\nResponse information as follow:\n\n{\n    \"code\": 0,\n    \"reason\": \"OK\",\n    \"resp\": \"ati\\r\\nQuectel_Ltd\\r\\nQuectel_M35\\r\\nRevision: M35FAR01A03\\r\\nOK\\r\\n\"\n}\n\n\nNotes: # and % will be ignore by the browser, they need to replace by %23 and %2B"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/goip_send_ussd.html": {
      "get": {
        "summary": "USSD API",
        "deprecated": false,
        "description": "1.Application will send a HTTP GET request to the device, device will return HTTP 200 OK response to the application.\n2.Request URL\n",
        "tags": [
          "USSD API"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Device Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Device Password",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Which port to send ussd(begin with port 1)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ussd",
            "in": "query",
            "description": "Ussd command code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "timeout (second)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "120"
            }
          },
          {
            "name": "retries",
            "in": "query",
            "description": "Number of failed retries.\nNote: the top-up service should set this field to 0 and check if success by USSD query.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "3"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Return code，0 means success",
                      "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6"
                      ]
                    },
                    "reason": {
                      "type": "string",
                      "description": "Reason describe"
                    },
                    "ussd": {
                      "type": "string",
                      "description": "Ussd command response"
                    },
                    "max-port": {
                      "type": "string",
                      "description": "Specify the max port"
                    },
                    "port": {
                      "type": "string",
                      "description": "Means available port\nNotes： 1,3-6,8,10 means port 1，3，4，5，6，8，10 available"
                    }
                  },
                  "required": [
                    "code",
                    "reason",
                    "ussd",
                    "max-port",
                    "port"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Successful instance",
                    "value": "Example:\r\n\r\nhttp://192.168.1.67/goip_send_ussd.html?username=root&passowrd=root&port=5&ussd=123\r\n\r\nResponse information as follow：\r\n{code:0,reason:”OK”,resp:”your balance is 50.00$”}"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "Pet": {
        "required": [
          "name",
          "photoUrls",
          "id",
          "category",
          "tags",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "宠物ID编号"
          },
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "分组"
          },
          "name": {
            "type": "string",
            "description": "名称",
            "examples": [
              "doggie"
            ]
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "照片URL"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "标签"
          },
          "status": {
            "type": "string",
            "description": "宠物销售状态",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "分组ID编号"
          },
          "name": {
            "type": "string",
            "description": "分组名称"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "标签ID编号"
          },
          "name": {
            "type": "string",
            "description": "标签名称"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "tasks": {
        "type": "object",
        "properties": {
          "tid": {
            "type": "integer",
            "description": "Task ID"
          },
          "from": {
            "type": "string",
            "description": "Use‘,’‘-’to assign more than one port(from\nchannel 1)"
          },
          "to": {
            "type": "string"
          },
          "to_all": {
            "type": "string"
          },
          "sms": {
            "type": "string"
          },
          "chs": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "to_all",
          "sms",
          "chs"
        ]
      }
    },
    "securitySchemes": {}
  },
  "servers": [],
  "security": {}
}